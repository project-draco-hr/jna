{
  File lib=new File(libName);
  if (lib.isAbsolute()) {
    searchPath=Arrays.asList(new String[]{lib.getParent()});
  }
  FilenameFilter filter=new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return (name.startsWith("lib" + libName) || (name.startsWith(libName) && libName.startsWith("lib"))) && isVersionedName(name);
    }
  }
;
  List matches=new LinkedList();
  for (Iterator it=searchPath.iterator(); it.hasNext(); ) {
    File[] files=new File((String)it.next()).listFiles(filter);
    if (files != null && files.length > 0) {
      matches.addAll(Arrays.asList(files));
    }
  }
  int version=0;
  String bestMatch=null;
  for (Iterator it=matches.iterator(); it.hasNext(); ) {
    String path=((File)it.next()).getAbsolutePath();
    String num=path.substring(path.lastIndexOf('.') + 1);
    try {
      if (Integer.parseInt(num) >= version) {
        bestMatch=path;
      }
    }
 catch (    NumberFormatException e) {
    }
  }
  return bestMatch;
}
