{
  ClassLoader loader=new TestLoader(true);
  Class<?> cls=Class.forName("com.sun.jna.Native",true,loader);
  assertEquals("Wrong class loader",loader,cls.getClassLoader());
  assertTrue("System property jna.loaded not set",Boolean.getBoolean("jna.loaded"));
  Field field=cls.getDeclaredField("jnidispatchPath");
  field.setAccessible(true);
  String path=(String)field.get(null);
  assertNotNull("Native library path unavailable",path);
  assertTrue("Native library not unpacked from jar: " + path,path.startsWith(System.getProperty("java.io.tmpdir")));
  Reference<Class<?>> ref=new WeakReference<Class<?>>(cls);
  Reference<ClassLoader> clref=new WeakReference<ClassLoader>(loader);
  loader=null;
  cls=null;
  field=null;
  System.gc();
  for (int i=0; i < GC_WAITS && (ref.get() != null || clref.get() != null); i++) {
    Thread.sleep(GC_WAIT_INTERVAL);
    System.gc();
  }
  assertNull("Class not GC'd: " + ref.get(),ref.get());
  assertNull("ClassLoader not GC'd: " + clref.get(),clref.get());
  File f=new File(path);
  for (int i=0; i < GC_WAITS && (f.exists() || Boolean.getBoolean("jna.loaded")); i++) {
    Thread.sleep(GC_WAIT_INTERVAL);
    System.gc();
  }
  if (f.exists()) {
    assertTrue("Temporary jnidispatch not marked for later deletion: " + f,new File(f.getAbsolutePath() + ".x").exists());
  }
  assertFalse("System property jna.loaded not cleared",Boolean.getBoolean("jna.loaded"));
  try {
    loader=new TestLoader(true);
    cls=Class.forName("com.sun.jna.Native",true,loader);
  }
 catch (  Throwable t) {
    fail("Couldn't load class again after discarding first load: " + t.getMessage());
  }
 finally {
    loader=null;
    cls=null;
    System.gc();
  }
}
