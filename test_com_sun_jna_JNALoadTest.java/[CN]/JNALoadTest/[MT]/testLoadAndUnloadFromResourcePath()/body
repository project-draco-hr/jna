{
  ClassLoader loader=new TestLoader(false);
  Class<?> cls=Class.forName("com.sun.jna.Native",true,loader);
  assertEquals("Wrong class loader",loader,cls.getClassLoader());
  assertTrue("System property jna.loaded not set",Boolean.getBoolean("jna.loaded"));
  Field field=cls.getDeclaredField("jnidispatchPath");
  field.setAccessible(true);
  String path=(String)field.get(null);
  assertNotNull("Native library not found",path);
  WeakReference ref=new WeakReference(cls);
  WeakReference clref=new WeakReference(loader);
  loader=null;
  cls=null;
  field=null;
  System.gc();
  for (int i=0; i < GC_WAITS && (ref.get() != null || clref.get() != null || Boolean.getBoolean("jna.loaded")); i++) {
    Thread.sleep(GC_WAIT_INTERVAL);
    System.gc();
  }
  assertNull("Class not GC'd: " + ref.get(),ref.get());
  assertNull("ClassLoader not GC'd: " + clref.get(),clref.get());
  assertFalse("System property jna.loaded not cleared",Boolean.getBoolean("jna.loaded"));
  Throwable throwable=null;
  for (int i=0; i < GC_WAITS; i++) {
    System.gc();
    Thread.sleep(GC_WAIT_INTERVAL);
    try {
      loader=new TestLoader(false);
      cls=Class.forName("com.sun.jna.Native",true,loader);
      break;
    }
 catch (    Throwable t) {
      loader=null;
      throwable=t;
    }
  }
  try {
    if (loader == null) {
      fail("Native library not unloaded: " + throwable.getMessage());
    }
  }
  finally {
    loader=null;
    cls=null;
    System.gc();
  }
}
