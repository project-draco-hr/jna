{
  File jar=new File(BUILDDIR + "/jna.jar");
  assertTrue("Expected JNA jar file at " + jar + " is missing",jar.exists());
  ClassLoader loader=new TestLoader(true);
  Class cls=Class.forName("com.sun.jna.Native",true,loader);
  assertEquals("Wrong class loader",loader,cls.getClassLoader());
  Field field=cls.getDeclaredField("nativeLibraryPath");
  field.setAccessible(true);
  String path=(String)field.get(null);
  assertTrue("Native library not unpacked from jar: " + path,path.startsWith(System.getProperty("java.io.tmpdir")));
  WeakReference ref=new WeakReference(cls);
  WeakReference clref=new WeakReference(loader);
  loader=null;
  cls=null;
  field=null;
  System.gc();
  for (int i=0; i < 100 && (ref.get() != null || clref.get() != null); i++) {
    Thread.sleep(10);
    System.gc();
  }
  assertNull("Class not GC'd: " + ref.get(),ref.get());
  assertNull("ClassLoader not GC'd: " + clref.get(),clref.get());
  File f=new File(path);
  for (int i=0; i < 100 && f.exists(); i++) {
    Thread.sleep(10);
    System.gc();
  }
  try {
    if (Platform.isWindows()) {
      ClassLoader.class.getDeclaredField("nativeLibraries");
    }
    if (f.exists() && !f.delete()) {
      assertFalse("Temporary native library still locked: " + path,f.exists());
    }
  }
 catch (  Exception e) {
  }
  try {
    loader=new TestLoader(true);
    cls=Class.forName("com.sun.jna.Native",true,loader);
  }
 catch (  Throwable t) {
    fail("Native library not unloaded: " + t.getMessage());
  }
 finally {
    loader=null;
    cls=null;
    System.gc();
  }
}
