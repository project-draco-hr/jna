{
synchronized (libraries) {
    Class interfaceClass=findEnclosingLibraryClass(type);
    if (interfaceClass != null)     loadLibraryInstance(interfaceClass);
 else     interfaceClass=type;
    if (!options.containsKey(interfaceClass)) {
      try {
        Field field=interfaceClass.getField("OPTIONS");
        field.setAccessible(true);
        options.put(interfaceClass,field.get(null));
      }
 catch (      NoSuchFieldException e) {
      }
catch (      Exception e) {
        throw new IllegalArgumentException("OPTIONS must be a public field of type java.util.Map (" + e + "): "+ interfaceClass);
      }
    }
    return (Map)options.get(interfaceClass);
  }
}
