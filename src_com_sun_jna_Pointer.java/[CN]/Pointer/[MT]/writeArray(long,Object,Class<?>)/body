{
  if (cls == byte.class) {
    byte[] buf=(byte[])value;
    write(offset,buf,0,buf.length);
  }
 else   if (cls == short.class) {
    short[] buf=(short[])value;
    write(offset,buf,0,buf.length);
  }
 else   if (cls == char.class) {
    char[] buf=(char[])value;
    write(offset,buf,0,buf.length);
  }
 else   if (cls == int.class) {
    int[] buf=(int[])value;
    write(offset,buf,0,buf.length);
  }
 else   if (cls == long.class) {
    long[] buf=(long[])value;
    write(offset,buf,0,buf.length);
  }
 else   if (cls == float.class) {
    float[] buf=(float[])value;
    write(offset,buf,0,buf.length);
  }
 else   if (cls == double.class) {
    double[] buf=(double[])value;
    write(offset,buf,0,buf.length);
  }
 else   if (Pointer.class.isAssignableFrom(cls)) {
    Pointer[] buf=(Pointer[])value;
    write(offset,buf,0,buf.length);
  }
 else   if (Structure.class.isAssignableFrom(cls)) {
    Structure[] sbuf=(Structure[])value;
    if (Structure.ByReference.class.isAssignableFrom(cls)) {
      Pointer[] buf=new Pointer[sbuf.length];
      for (int i=0; i < sbuf.length; i++) {
        if (sbuf[i] == null) {
          buf[i]=null;
        }
 else {
          buf[i]=sbuf[i].getPointer();
          sbuf[i].write();
        }
      }
      write(offset,buf,0,buf.length);
    }
 else {
      Structure first=sbuf[0];
      if (first == null) {
        first=Structure.newInstance(cls,share(offset));
        sbuf[0]=first;
      }
 else {
        first.useMemory(this,(int)offset,true);
      }
      first.write();
      Structure[] tmp=first.toArray(sbuf.length);
      for (int i=1; i < sbuf.length; i++) {
        if (sbuf[i] == null) {
          sbuf[i]=tmp[i];
        }
 else {
          sbuf[i].useMemory(this,(int)(offset + i * sbuf[i].size()),true);
        }
        sbuf[i].write();
      }
    }
  }
 else   if (NativeMapped.class.isAssignableFrom(cls)) {
    NativeMapped[] buf=(NativeMapped[])value;
    NativeMappedConverter tc=NativeMappedConverter.getInstance(cls);
    Class<?> nativeType=tc.nativeType();
    int size=Native.getNativeSize(value.getClass(),value) / buf.length;
    for (int i=0; i < buf.length; i++) {
      Object element=tc.toNative(buf[i],new ToNativeContext());
      setValue(offset + i * size,element,nativeType);
    }
  }
 else {
    throw new IllegalArgumentException("Writing array of " + cls + " to memory not supported");
  }
}
