{
  String BUILDDIR=System.getProperty("jna.builddir","build" + (Platform.is64Bit() ? "-d64" : ""));
  String codebase=new File(BUILDDIR,"jws").toURI().toURL().toString();
  ServerSocket s=new ServerSocket(0);
  s.setSoTimeout(120000);
  int port=s.getLocalPort();
  File jnlp=File.createTempFile(getName(),".jnlp");
  String contents=JNLP.replace("{CLASS}",testClass);
  contents=contents.replace("{METHOD}",testMethod);
  contents=contents.replace("{CODEBASE}",codebase);
  contents=contents.replace("{JNLP_FILE}",jnlp.toURI().toURL().toString());
  contents=contents.replace("{PORT}",String.valueOf(port));
  boolean clover=System.getProperty("java.class.path").indexOf("clover") != -1;
  contents=contents.replace("{CLOVER}",clover ? "<jar href='clover.jar'/>" : "");
  try {
    OutputStream os=new FileOutputStream(jnlp);
    os.write(contents.getBytes());
    os.close();
    String path=findJWS();
    String[] cmd={path,"-Xnosplash","-wait",jnlp.toURI().toURL().toString()};
    final Process p=Runtime.getRuntime().exec(cmd);
    final StringBuffer output=new StringBuffer();
class SocketHandler extends Thread {
      private InputStream is;
      private StringBuffer sb;
      public SocketHandler(      Socket s,      StringBuffer b) throws IOException {
        this.is=s.getInputStream();
        this.sb=b;
      }
      public void run(){
        byte[] buf=new byte[256];
        while (true) {
          try {
            int count=is.read(buf,0,buf.length);
            if (count == -1)             break;
            if (count == 0) {
              try {
                sleep(1);
              }
 catch (              InterruptedException e) {
              }
            }
 else {
              sb.append(new String(buf,0,count));
            }
          }
 catch (          IOException e) {
            showMessage("read error: " + e.toString());
          }
        }
        try {
          is.close();
        }
 catch (        IOException e) {
        }
      }
    }
    Thread out=null;
    try {
      out=new SocketHandler(s.accept(),output);
      out.start();
    }
 catch (    SocketTimeoutException e) {
      try {
        p.exitValue();
      }
 catch (      IllegalThreadStateException e2) {
        p.destroy();
        throw new Error("JWS Timed out");
      }
    }
    p.waitFor();
    if (out != null) {
      out.join();
    }
    int code=p.exitValue();
    String error=output.toString();
    if (code != 0 || !"".equals(error)) {
      if (code == 1 || error.indexOf("AssertionFailedError") != -1) {
        fail("JWS FAIL: " + error);
      }
      throw new Error("JWS ERROR: " + error);
    }
  }
  finally {
    jnlp.delete();
  }
}
