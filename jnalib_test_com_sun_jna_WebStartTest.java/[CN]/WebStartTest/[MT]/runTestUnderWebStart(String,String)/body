{
  String BUILDDIR=System.getProperty("jna.builddir","build" + (Platform.is64Bit() ? "-d64" : ""));
  String codebase=new File(BUILDDIR,"jws").toURI().toURL().toString();
  ServerSocket s=new ServerSocket(0);
  s.setSoTimeout(10000);
  int port=s.getLocalPort();
  File jnlp=File.createTempFile(getName(),".jnlp");
  jnlp.deleteOnExit();
  String contents=JNLP.replace("{CLASS}",testClass);
  contents=contents.replace("{METHOD}",testMethod);
  contents=contents.replace("{CODEBASE}",codebase);
  contents=contents.replace("{JNLP_FILE}",jnlp.toURI().toURL().toString());
  contents=contents.replace("{PORT}",String.valueOf(port));
  OutputStream os=new FileOutputStream(jnlp);
  os.write(contents.getBytes());
  os.close();
  File keystore=new File("jna.keystore");
  String JAVA_HOME=System.getProperty("java.home");
  String LIB=new File(JAVA_HOME,"/lib").getAbsolutePath();
  if (!new File(LIB,"javaws.jar").exists()) {
    LIB=new File("/System/Library/Frameworks/JavaVM.framework/Resources/Deploy.bundle/Contents/Home/lib").getAbsolutePath();
    if (!new File(LIB,"javaws.jar").exists()) {
      throw new IOException("javaws.jar not found");
    }
  }
  String PS=System.getProperty("path.separator");
  String[] cmd={"javaws","-Xnosplash","-wait",jnlp.toURI().toURL().toString()};
  Process p=Runtime.getRuntime().exec(cmd);
  StringBuffer output=new StringBuffer();
class SocketHandler extends Thread {
    private InputStream is;
    private StringBuffer sb;
    public SocketHandler(    Socket s,    StringBuffer b) throws IOException {
      this.is=s.getInputStream();
      this.sb=b;
    }
    public void run(){
      byte[] buf=new byte[256];
      while (true) {
        try {
          int count=is.read(buf,0,buf.length);
          if (count == -1)           break;
          if (count == 0) {
            try {
              sleep(1);
            }
 catch (            InterruptedException e) {
            }
          }
 else {
            sb.append(new String(buf,0,count));
          }
        }
 catch (        IOException e) {
        }
      }
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
  }
  try {
    Thread out=new SocketHandler(s.accept(),output);
    out.start();
  }
 catch (  SocketTimeoutException e) {
  }
  p.waitFor();
  int code=p.exitValue();
  String error=output.toString();
  if (code != 0 || !"".equals(error)) {
    if (code == 1 || error.indexOf("AssertionFailedError") != -1) {
      fail("JWS FAIL: " + error);
    }
    throw new Error("JWS ERROR: " + error);
  }
}
