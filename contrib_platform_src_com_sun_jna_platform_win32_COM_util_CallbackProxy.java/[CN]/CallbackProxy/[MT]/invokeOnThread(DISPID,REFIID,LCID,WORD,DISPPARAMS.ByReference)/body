{
  List<Object> rjargs=new ArrayList<Object>();
  if (pDispParams.cArgs.intValue() > 0) {
    VariantArg vargs=pDispParams.rgvarg;
    vargs.setArraySize(pDispParams.cArgs.intValue());
    for (    Variant.VARIANT varg : vargs.variantArg) {
      Object jarg=Convert.toJavaObject(varg);
      if (jarg instanceof IDispatch) {
        IDispatch dispatch=(IDispatch)jarg;
        PointerByReference ppvObject=new PointerByReference();
        IID iid=com.sun.jna.platform.win32.COM.IUnknown.IID_IUNKNOWN;
        dispatch.QueryInterface(new REFIID(iid),ppvObject);
        Unknown rawUnk=new Unknown(ppvObject.getValue());
        long unknownId=Pointer.nativeValue(rawUnk.getPointer());
        int n=rawUnk.Release();
        IUnknown unk=CallbackProxy.this.factory.createProxy(IUnknown.class,unknownId,dispatch);
        rjargs.add(unk);
      }
 else {
        rjargs.add(jarg);
      }
    }
  }
  final List<Object> jargs=new ArrayList<Object>(rjargs);
  Runnable invokation=new Runnable(){
    @Override public void run(){
      try {
        if (CallbackProxy.this.dsipIdMap.containsKey(dispIdMember)) {
          Method eventMethod=CallbackProxy.this.dsipIdMap.get(dispIdMember);
          if (eventMethod.getParameterTypes().length != jargs.size()) {
            CallbackProxy.this.comEventCallbackListener.errorReceivingCallbackEvent("Trying to invoke method " + eventMethod + " with "+ jargs.size()+ " arguments",null);
          }
 else {
            try {
              List<Object> margs=new ArrayList<Object>();
              Class<?>[] params=eventMethod.getParameterTypes();
              for (int i=0; i < eventMethod.getParameterTypes().length; ++i) {
                Class<?> paramType=params[i];
                Object jobj=jargs.get(i);
                if (jobj != null && paramType.getAnnotation(ComInterface.class) != null) {
                  if (jobj instanceof IUnknown) {
                    IUnknown unk=(IUnknown)jobj;
                    Object mobj=unk.queryInterface(paramType);
                    margs.add(mobj);
                  }
 else {
                    throw new RuntimeException("Cannot convert argument " + jobj.getClass() + " to ComInterface "+ paramType);
                  }
                }
 else {
                  margs.add(jobj);
                }
              }
              eventMethod.invoke(comEventCallbackListener,margs.toArray());
            }
 catch (            Exception e) {
              CallbackProxy.this.comEventCallbackListener.errorReceivingCallbackEvent("Exception invoking method " + eventMethod,e);
            }
          }
        }
 else {
          CallbackProxy.this.comEventCallbackListener.errorReceivingCallbackEvent("No method found with dispId = " + dispIdMember,null);
        }
      }
 catch (      Exception e) {
        CallbackProxy.this.comEventCallbackListener.errorReceivingCallbackEvent("Exception receiving callback event ",e);
      }
    }
  }
;
  this.executorService.execute(invokation);
}
