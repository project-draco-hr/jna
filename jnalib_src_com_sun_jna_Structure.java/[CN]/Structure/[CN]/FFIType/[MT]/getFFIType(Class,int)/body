{
  long value=FFI_TYPE_VOID;
  if (cls == byte.class || cls == Byte.class)   value=FFI_TYPE_SINT8;
 else   if (cls == short.class || cls == Short.class)   value=FFI_TYPE_SINT16;
 else   if (cls == char.class || cls == Character.class)   value=Native.WCHAR_SIZE == 2 ? FFI_TYPE_UINT16 : FFI_TYPE_UINT32;
 else   if (cls == int.class || cls == Integer.class)   value=FFI_TYPE_SINT32;
 else   if (cls == long.class || cls == Long.class)   value=FFI_TYPE_SINT64;
 else   if (cls == float.class || cls == Float.class)   value=FFI_TYPE_FLOAT;
 else   if (cls == double.class || cls == Double.class)   value=FFI_TYPE_DOUBLE;
 else   if (Pointer.class == cls || Buffer.class.isAssignableFrom(cls) || Callback.class.isAssignableFrom(cls) || String.class == cls || WString.class == cls) {
    value=FFI_TYPE_POINTER;
  }
 else   if (Structure.class.isAssignableFrom(cls)) {
    if (ByReference.class.isAssignableFrom(cls))     value=FFI_TYPE_POINTER;
 else     return newInstance(cls).getTypeInfo();
  }
 else   if (cls.isArray()) {
    return new FFIType(cls.getComponentType(),length).getPointer();
  }
 else {
    throw new IllegalArgumentException("Unsupported structure field type " + cls);
  }
  return new Pointer(value);
}
