{
  int offset=structField.offset;
  Object value=null;
  try {
    value=structField.field.get(this);
  }
 catch (  Exception e) {
    throw new RuntimeException("Exception reading field \"" + structField.name + "\"",e);
  }
  Class nativeType=structField.type;
  ToNativeConverter converter=structField.writeConverter;
  if (converter != null) {
    value=converter.toNative(value);
    nativeType=value != null ? value.getClass() : Pointer.class;
  }
  if (String.class == nativeType || WString.class == nativeType) {
    boolean wide=nativeType == WString.class;
    if (value != null) {
      NativeString nativeString=new NativeString(value.toString(),wide);
      nativeStrings.put(structField.name,nativeString);
      value=nativeString.getPointer();
    }
 else {
      value=null;
    }
  }
  if (nativeType == byte.class || nativeType == Byte.class) {
    memory.setByte(offset,((Byte)value).byteValue());
  }
 else   if (nativeType == short.class || nativeType == Short.class) {
    memory.setShort(offset,((Short)value).shortValue());
  }
 else   if (nativeType == char.class || nativeType == Character.class) {
    memory.setChar(offset,((Character)value).charValue());
  }
 else   if (nativeType == int.class || nativeType == Integer.class) {
    memory.setInt(offset,((Integer)value).intValue());
  }
 else   if (nativeType == long.class || nativeType == Long.class) {
    memory.setLong(offset,((Long)value).longValue());
  }
 else   if (nativeType == NativeLong.class) {
    memory.setNativeLong(offset,((NativeLong)value));
  }
 else   if (nativeType == float.class || nativeType == Float.class) {
    memory.setFloat(offset,((Float)value).floatValue());
  }
 else   if (nativeType == double.class || nativeType == Double.class) {
    memory.setDouble(offset,((Double)value).doubleValue());
  }
 else   if (Pointer.class.isAssignableFrom(nativeType)) {
    memory.setPointer(offset,(Pointer)value);
  }
 else   if (nativeType == String.class) {
    memory.setPointer(offset,(Pointer)value);
  }
 else   if (nativeType == WString.class) {
    memory.setPointer(offset,(Pointer)value);
  }
 else   if (nativeType.isArray()) {
    Class cls=nativeType.getComponentType();
    if (cls == byte.class) {
      byte[] buf=(byte[])value;
      memory.write(offset,buf,0,buf.length);
    }
 else     if (cls == short.class) {
      short[] buf=(short[])value;
      memory.write(offset,buf,0,buf.length);
    }
 else     if (cls == char.class) {
      char[] buf=(char[])value;
      memory.write(offset,buf,0,buf.length);
    }
 else     if (cls == int.class) {
      int[] buf=(int[])value;
      memory.write(offset,buf,0,buf.length);
    }
 else     if (cls == long.class) {
      long[] buf=(long[])value;
      memory.write(offset,buf,0,buf.length);
    }
 else     if (cls == float.class) {
      float[] buf=(float[])value;
      memory.write(offset,buf,0,buf.length);
    }
 else     if (cls == double.class) {
      double[] buf=(double[])value;
      memory.write(offset,buf,0,buf.length);
    }
 else {
      throw new IllegalArgumentException("Inline array of " + cls + " not supported");
    }
  }
 else   if (Structure.class.isAssignableFrom(nativeType)) {
    Structure s=(Structure)value;
    s.useMemory(memory,offset);
    s.write();
  }
 else   if (Callback.class.isAssignableFrom(nativeType)) {
    Pointer p=null;
    if (value != null) {
      CallbackReference cbref=CallbackReference.getInstance((Callback)value);
      p=cbref.getTrampoline();
    }
    memory.setPointer(offset,p);
  }
 else {
    throw new IllegalArgumentException("Field \"" + structField.name + "\" was declared as an "+ "unsupported type \""+ nativeType+ "\"");
  }
}
