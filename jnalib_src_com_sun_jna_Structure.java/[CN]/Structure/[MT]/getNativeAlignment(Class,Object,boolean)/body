{
  int alignment=1;
  if (NativeMapped.class.isAssignableFrom(type)) {
    NativeMappedConverter tc=NativeMappedConverter.getInstance(type);
    type=tc.nativeType();
    value=tc.toNative(value,new ToNativeContext());
  }
  int size=getNativeSize(type,value);
  if (type.isPrimitive() || Long.class == type || Integer.class == type || Short.class == type || Character.class == type || Byte.class == type || Float.class == type || Double.class == type) {
    alignment=size;
  }
 else   if (Pointer.class == type || Buffer.class.isAssignableFrom(type) || Callback.class.isAssignableFrom(type) || WString.class == type || String.class == type) {
    alignment=Pointer.SIZE;
  }
 else   if (Structure.class.isAssignableFrom(type)) {
    if (ByReference.class.isAssignableFrom(type)) {
      alignment=Pointer.SIZE;
    }
 else {
      if (value == null)       value=newInstance(type);
      alignment=((Structure)value).getStructAlignment();
    }
  }
 else   if (type.isArray()) {
    alignment=getNativeAlignment(type.getComponentType(),null,isFirstElement);
  }
 else {
    throw new IllegalArgumentException("Type " + type + " has unknown "+ "native alignment");
  }
  if (alignType == ALIGN_NONE) {
    alignment=1;
  }
 else   if (alignType == ALIGN_MSVC) {
    alignment=Math.min(8,alignment);
  }
 else   if (alignType == ALIGN_GNUC) {
    if (!isFirstElement || !(Platform.isMac() && isPPC)) {
      alignment=Math.min(MAX_GNUC_ALIGNMENT,alignment);
    }
  }
  return alignment;
}
