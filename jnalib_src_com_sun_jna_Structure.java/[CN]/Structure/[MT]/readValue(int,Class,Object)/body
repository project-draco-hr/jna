{
  Object result=null;
  if (Structure.class.isAssignableFrom(nativeType)) {
    Structure s=(Structure)currentValue;
    if (ByReference.class.isAssignableFrom(nativeType)) {
      s=updateStructureByReference(nativeType,s,memory.getPointer(offset));
    }
 else {
      s.useMemory(memory,offset);
      s.read();
    }
    result=s;
  }
 else   if (nativeType == boolean.class || nativeType == Boolean.class) {
    result=Function.valueOf(memory.getInt(offset) != 0);
  }
 else   if (nativeType == byte.class || nativeType == Byte.class) {
    result=new Byte(memory.getByte(offset));
  }
 else   if (nativeType == short.class || nativeType == Short.class) {
    result=new Short(memory.getShort(offset));
  }
 else   if (nativeType == char.class || nativeType == Character.class) {
    result=new Character(memory.getChar(offset));
  }
 else   if (nativeType == int.class || nativeType == Integer.class) {
    result=new Integer(memory.getInt(offset));
  }
 else   if (nativeType == long.class || nativeType == Long.class) {
    result=new Long(memory.getLong(offset));
  }
 else   if (nativeType == float.class || nativeType == Float.class) {
    result=new Float(memory.getFloat(offset));
  }
 else   if (nativeType == double.class || nativeType == Double.class) {
    result=new Double(memory.getDouble(offset));
  }
 else   if (nativeType == Pointer.class) {
    result=memory.getPointer(offset);
  }
 else   if (nativeType == String.class) {
    Pointer p=memory.getPointer(offset);
    result=p != null ? p.getString(0) : null;
  }
 else   if (nativeType == WString.class) {
    Pointer p=memory.getPointer(offset);
    result=p != null ? new WString(p.getString(0,true)) : null;
  }
 else   if (Callback.class.isAssignableFrom(nativeType)) {
    Pointer fp=memory.getPointer(offset);
    if (fp == null) {
      result=null;
    }
 else {
      Callback cb=(Callback)currentValue;
      Pointer oldfp=CallbackReference.getFunctionPointer(cb);
      if (!fp.equals(oldfp)) {
        cb=CallbackReference.getCallback(nativeType,fp);
      }
      result=cb;
    }
  }
 else   if (nativeType.isArray()) {
    result=currentValue;
    if (result == null) {
      throw new IllegalStateException("Array field in Structure not initialized");
    }
    readArrayValue(offset,result,nativeType.getComponentType());
  }
 else {
    throw new IllegalArgumentException("Unsupported field type \"" + nativeType + "\"");
  }
  return result;
}
