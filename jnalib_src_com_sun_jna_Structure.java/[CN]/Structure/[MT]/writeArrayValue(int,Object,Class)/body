{
  if (cls == byte.class) {
    byte[] buf=(byte[])value;
    memory.write(offset,buf,0,buf.length);
  }
 else   if (cls == short.class) {
    short[] buf=(short[])value;
    memory.write(offset,buf,0,buf.length);
  }
 else   if (cls == char.class) {
    char[] buf=(char[])value;
    memory.write(offset,buf,0,buf.length);
  }
 else   if (cls == int.class) {
    int[] buf=(int[])value;
    memory.write(offset,buf,0,buf.length);
  }
 else   if (cls == long.class) {
    long[] buf=(long[])value;
    memory.write(offset,buf,0,buf.length);
  }
 else   if (cls == float.class) {
    float[] buf=(float[])value;
    memory.write(offset,buf,0,buf.length);
  }
 else   if (cls == double.class) {
    double[] buf=(double[])value;
    memory.write(offset,buf,0,buf.length);
  }
 else   if (Pointer.class.isAssignableFrom(cls)) {
    Pointer[] buf=(Pointer[])value;
    memory.write(offset,buf,0,buf.length);
  }
 else   if (Structure.class.isAssignableFrom(cls)) {
    Structure[] sbuf=(Structure[])value;
    if (ByReference.class.isAssignableFrom(cls)) {
      Pointer[] buf=new Pointer[sbuf.length];
      for (int i=0; i < sbuf.length; i++) {
        buf[i]=sbuf[i] == null ? null : sbuf[i].getPointer();
        sbuf[i].write();
      }
      memory.write(offset,buf,0,buf.length);
    }
 else {
      for (int i=0; i < sbuf.length; i++) {
        if (sbuf[i] == null) {
          sbuf[i]=newInstance(cls);
        }
        sbuf[i].useMemory(memory,offset + i * sbuf[i].size());
        sbuf[i].write();
      }
    }
  }
 else   if (NativeMapped.class.isAssignableFrom(cls)) {
    NativeMapped[] buf=(NativeMapped[])value;
    NativeMappedConverter tc=NativeMappedConverter.getInstance(cls);
    Class nativeType=tc.nativeType();
    int size=getNativeSize(value.getClass(),value) / buf.length;
    for (int i=0; i < buf.length; i++) {
      Object element=tc.toNative(buf[i],new ToNativeContext());
      if (!writeValue(offset + i * size,element,nativeType)) {
        return false;
      }
    }
  }
 else {
    throw new IllegalArgumentException("Inline array of " + cls + " not supported");
  }
  return true;
}
