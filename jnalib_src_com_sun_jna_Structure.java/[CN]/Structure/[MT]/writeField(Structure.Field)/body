{
  int offset=structField.offset;
  Class fieldType=structField.type;
  Object value=Pointer.NULL;
  try {
    value=structField.field.get(struct());
  }
 catch (  Exception e) {
    throw new RuntimeException("Exception reading field \"" + structField.name + "\"",e);
  }
  if (String.class.isAssignableFrom(fieldType)) {
    NativeString nativeString=new NativeString((String)value);
    value=nativeString;
    NativeString oldString=(NativeString)allocatedStrings.get(structField.name);
    if (oldString != null)     oldString.free();
    allocatedStrings.put(structField.name,nativeString);
  }
 else   if (Structure.class.isAssignableFrom(fieldType)) {
    value=((Structure)value).getMemory();
  }
  if (fieldType == Byte.TYPE || fieldType == Byte.class) {
    getMemory().setByte(offset,((Byte)value).byteValue());
  }
 else   if (fieldType == Short.TYPE || fieldType == Short.class) {
    getMemory().setShort(offset,((Short)value).shortValue());
  }
 else   if (fieldType == Integer.TYPE || fieldType == Integer.class) {
    getMemory().setInt(offset,((Integer)value).intValue());
  }
 else   if (fieldType == Long.TYPE || fieldType == Long.class) {
    getMemory().setLong(offset,((Long)value).longValue());
  }
 else   if (fieldType == Float.TYPE || fieldType == Float.class) {
    getMemory().setFloat(offset,((Float)value).floatValue());
  }
 else   if (fieldType == Double.TYPE || fieldType == Double.class) {
    getMemory().setDouble(offset,((Double)value).doubleValue());
  }
 else   if (Pointer.class.isAssignableFrom(fieldType)) {
    getMemory().setPointer(offset,(Pointer)value);
  }
 else   if (NativeString.class.isAssignableFrom(fieldType)) {
    getMemory().setPointer(offset,((NativeString)value).getPointer());
  }
 else   if (fieldType == String.class) {
    getMemory().setPointer(offset,((NativeString)value).getPointer());
  }
 else {
    throw new IllegalArgumentException("Field \"" + structField.name + "\" was declared as an "+ "unsupported type \""+ fieldType.getClass()+ "\"");
  }
}
