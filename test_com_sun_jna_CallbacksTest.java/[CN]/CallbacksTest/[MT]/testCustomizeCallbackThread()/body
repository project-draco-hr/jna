{
  final int[] called={0};
  final boolean[] daemon={false};
  final String[] name={null};
  final ThreadGroup[] group={null};
  final Thread[] t={null};
  final String tname="NAME: " + getName() + UNICODE;
  final boolean[] alive={false};
  ThreadGroup testGroup=new ThreadGroup("Thread group for " + getName());
  CallbackThreadInitializer init=new CallbackThreadInitializer(true,false,tname,testGroup);
  TestLibrary.VoidCallback cb=new TestLibrary.VoidCallback(){
    public void callback(){
      Thread thread=Thread.currentThread();
      daemon[0]=thread.isDaemon();
      name[0]=thread.getName();
      group[0]=thread.getThreadGroup();
      t[0]=thread;
      if (thread.isAlive()) {
        alive[0]=true;
      }
      if (++called[0] == 2) {
        Native.detach(true);
      }
    }
  }
;
  callThreadedCallback(cb,init,1,5000,called);
  assertTrue("Callback thread not attached as daemon",daemon[0]);
  assertEquals("Callback thread name not applied",tname,name[0]);
  assertEquals("Callback thread group not applied",testGroup,group[0]);
  if (!alive[0]) {
    throw new Error("VM incorrectly reports Thread.isAlive() == false within callback");
  }
  assertTrue("Thread should still be alive",t[0].isAlive());
}
