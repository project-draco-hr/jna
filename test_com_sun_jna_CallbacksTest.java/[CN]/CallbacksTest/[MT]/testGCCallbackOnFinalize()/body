{
  final boolean[] called={false};
  TestLibrary.VoidCallback cb=new TestLibrary.VoidCallback(){
    @Override public void callback(){
      called[0]=true;
    }
  }
;
  lib.callVoidCallback(cb);
  assertTrue("Callback not called",called[0]);
  Map<Callback,CallbackReference> refs=new WeakHashMap<Callback,CallbackReference>(callbackCache());
  assertTrue("Callback not cached",refs.containsKey(cb));
  CallbackReference ref=refs.get(cb);
  refs=callbackCache();
  Pointer cbstruct=ref.cbstruct;
  cb=null;
  System.gc();
  for (int i=0; i < 100 && (ref.get() != null || refs.containsValue(ref)); ++i) {
    Thread.sleep(10);
    System.gc();
  }
  assertNull("Callback not GC'd",ref.get());
  assertFalse("Callback still in map",refs.containsValue(ref));
  ref=null;
  System.gc();
  for (int i=0; i < 100 && (cbstruct.peer != 0 || refs.size() > 0); ++i) {
    refs.size();
    try {
      Thread.sleep(10);
      System.gc();
    }
  finally {
    }
  }
  assertEquals("Callback trampoline not freed",0,cbstruct.peer);
}
