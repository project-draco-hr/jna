{
  final boolean[] called={false};
  final TestStructure.ByValue[] arg={null};
  final TestStructure.ByValue s=new TestStructure.ByValue();
  TestStructure.TestCallback cb=new TestStructure.TestCallback(){
    @Override public TestStructure.ByValue callback(    TestStructure.ByValue s){
      called[0]=true;
      return arg[0]=s;
    }
  }
;
  s.c=(byte)0x11;
  s.s=0x2222;
  s.i=0x33333333;
  s.j=0x4444444444444444L;
  s.inner.value=5;
  TestStructure result=lib.callCallbackWithStructByValue(cb,s);
  assertTrue("Callback not called",called[0]);
  assertTrue("ByValue argument should own its own memory, instead was " + arg[0].getPointer(),arg[0].getPointer() instanceof Memory);
  assertTrue("ByValue result should own its own memory, instead was " + result.getPointer(),result.getPointer() instanceof Memory);
  if (!s.dataEquals(arg[0],true)) {
    System.out.println("Mismatch: " + s);
    System.out.println("  versus: " + arg[0]);
  }
  assertTrue("Wrong value for callback argument",s.dataEquals(arg[0],true));
  if (!s.dataEquals(result,true)) {
    System.out.println("Mismatch: " + s);
    System.out.println("  versus: " + result);
  }
  assertTrue("Wrong value for callback result",s.dataEquals(result,true));
}
