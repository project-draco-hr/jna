{
  if (!Platform.HAS_DLL_CALLBACKS) {
    return;
  }
  final boolean[] called={false};
class TestCallback implements TestLibrary.VoidCallback, com.sun.jna.win32.DLLCallback {
    public void callback(){
      called[0]=true;
    }
  }
  TestCallback cb=new TestCallback();
  lib.callVoidCallback(cb);
  assertTrue("Callback not called",called[0]);
  Pointer fp=CallbackReference.getFunctionPointer(cb);
  NativeLibrary kernel32=NativeLibrary.getInstance("kernel32",W32APIOptions.DEFAULT_OPTIONS);
  Function f=kernel32.getFunction("GetModuleHandleEx");
  final int GET_MODULE_HANDLE_FROM_ADDRESS=0x4;
  PointerByReference pref=new PointerByReference();
  int result=f.invokeInt(new Object[]{new Integer(GET_MODULE_HANDLE_FROM_ADDRESS),fp,pref});
  assertTrue("GetModuleHandleEx(fptr) failed: " + Native.getLastError(),result != 0);
  f=kernel32.getFunction("GetModuleHandle");
  Pointer handle=f.invokePointer(new Object[]{"jnidispatch"});
  assertTrue("GetModuleHandle(\"jnidispatch\") failed: " + Native.getLastError(),result != 0);
  assertEquals("Wrong module HANDLE for DLL function pointer",handle,pref.getValue());
  Map refs=new WeakHashMap(callbackCache());
  assertTrue("Callback not cached",refs.containsKey(cb));
  CallbackReference ref=(CallbackReference)refs.get(cb);
  refs=callbackCache();
  Pointer cbstruct=ref.cbstruct;
  Pointer first_fptr=cbstruct.getPointer(0);
  cb=null;
  System.gc();
  for (int i=0; i < 100 && (ref.get() != null || refs.containsValue(ref)); ++i) {
    Thread.sleep(10);
    System.gc();
  }
  assertNull("Callback not GC'd",ref.get());
  assertFalse("Callback still in map",refs.containsValue(ref));
  ref=null;
  System.gc();
  for (int i=0; i < 100 && (cbstruct.peer != 0 || refs.size() > 0); ++i) {
    refs.size();
    Thread.sleep(10);
    System.gc();
  }
  assertEquals("Callback trampoline not freed",0,cbstruct.peer);
  called[0]=false;
  cb=new TestCallback();
  lib.callVoidCallback(cb);
  ref=(CallbackReference)refs.get(cb);
  cbstruct=ref.cbstruct;
  assertTrue("Callback not called",called[0]);
  assertEquals("Same (in-DLL) address should be re-used for DLL callbacks after callback is GCd",first_fptr,cbstruct.getPointer(0));
}
