{
  if (!Platform.HAS_DLL_CALLBACKS) {
    return;
  }
  final boolean[] called={false};
class TestCallback implements TestLibrary.VoidCallback, com.sun.jna.win32.DLLCallback {
    public void callback(){
      called[0]=true;
    }
  }
  TestCallback cb=new TestCallback();
  lib.callVoidCallback(cb);
  assertTrue("Callback not called",called[0]);
  Map refs=new WeakHashMap(CallbackReference.callbackMap);
  assertTrue("Callback not cached",refs.containsKey(cb));
  CallbackReference ref=(CallbackReference)refs.get(cb);
  refs=CallbackReference.callbackMap;
  Pointer cbstruct=ref.cbstruct;
  Pointer first_fptr=cbstruct.getPointer(0);
  cb=null;
  System.gc();
  for (int i=0; i < 100 && (ref.get() != null || refs.containsValue(ref)); ++i) {
    Thread.sleep(10);
    System.gc();
  }
  assertNull("Callback not GC'd",ref.get());
  assertFalse("Callback still in map",refs.containsValue(ref));
  ref=null;
  System.gc();
  for (int i=0; i < 100 && (cbstruct.peer != 0 || refs.size() > 0); ++i) {
    refs.size();
    Thread.sleep(10);
    System.gc();
  }
  assertEquals("Callback trampoline not freed",0,cbstruct.peer);
  called[0]=false;
  cb=new TestCallback();
  lib.callVoidCallback(cb);
  ref=(CallbackReference)refs.get(cb);
  cbstruct=ref.cbstruct;
  assertTrue("Callback not called",called[0]);
  assertEquals("Same (in-DLL) address should be re-used for DLL callbacks",first_fptr,cbstruct.getPointer(0));
}
