{
  final RuntimeException ERROR=new RuntimeException(getName());
  final Throwable CAUGHT[]={null};
  final Callback CALLBACK[]={null};
  UncaughtExceptionHandler old=Native.getCallbackExceptionHandler();
  UncaughtExceptionHandler handler=new UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Callback cb,    Throwable e){
      CALLBACK[0]=cb;
      CAUGHT[0]=e;
    }
  }
;
  Native.setCallbackExceptionHandler(handler);
  try {
class TestProxy implements CallbackProxy, TestLibrary.CbCallback {
      @Override public CbCallback callback(      CbCallback arg){
        throw new Error("Should never be called");
      }
      @Override public Object callback(      Object[] args){
        throw ERROR;
      }
      @Override public Class[] getParameterTypes(){
        return new Class[]{CbCallback.class};
      }
      @Override public Class getReturnType(){
        return CbCallback.class;
      }
    }
    ;
    TestLibrary.CbCallback cb=new TestProxy();
    TestLibrary.CbCallback cb2=lib.callCallbackWithCallback(cb);
    assertNotNull("Exception handler not called",CALLBACK[0]);
    assertEquals("Wrong callback argument to handler",cb,CALLBACK[0]);
    assertEquals("Wrong exception passed to handler",ERROR,CAUGHT[0]);
  }
  finally {
    Native.setCallbackExceptionHandler(old);
  }
}
