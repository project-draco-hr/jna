{
  removeTemporaryFiles();
  String libName="jnidispatch";
  String bootPath=System.getProperty("jna.boot.library.path");
  if (bootPath != null) {
    StringTokenizer dirs=new StringTokenizer(bootPath,File.pathSeparator);
    while (dirs.hasMoreTokens()) {
      String dir=dirs.nextToken();
      File file=new File(new File(dir),System.mapLibraryName(libName));
      String path=file.getAbsolutePath();
      if (file.exists()) {
        System.out.println("Try " + path);
        try {
          System.load(path);
          System.out.println("Loaded " + path);
          nativeLibraryPath=path;
          return;
        }
 catch (        UnsatisfiedLinkError ex) {
          ex.printStackTrace();
        }
      }
      if (Platform.isMac()) {
        String orig, ext;
        if (path.endsWith("dylib")) {
          orig="dylib";
          ext="jnilib";
        }
 else {
          orig="jnilib";
          ext="dylib";
        }
        path=path.substring(0,path.lastIndexOf(orig)) + ext;
        if (new File(path).exists()) {
          try {
            System.load(path);
            nativeLibraryPath=path;
            return;
          }
 catch (          UnsatisfiedLinkError ex) {
          }
        }
      }
    }
  }
  try {
    if (!Boolean.getBoolean("jna.nosys")) {
      System.loadLibrary(libName);
      return;
    }
  }
 catch (  UnsatisfiedLinkError e) {
    if (Boolean.getBoolean("jna.nounpack")) {
      throw e;
    }
  }
  if (!Boolean.getBoolean("jna.nounpack")) {
    loadNativeLibraryFromJar();
    return;
  }
  throw new UnsatisfiedLinkError("Native jnidispatch library not found");
}
