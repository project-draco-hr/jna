{
  if (loader == null) {
    loader=Thread.currentThread().getContextClassLoader();
  }
  String libname=name.startsWith("/") ? name : NativeLibrary.mapSharedLibraryName(name);
  String resourcePath=name.startsWith("/") ? name : Platform.RESOURCE_PREFIX + "/" + libname;
  if (resourcePath.startsWith("/")) {
    resourcePath=resourcePath.substring(1);
  }
  URL url=loader.getResource(resourcePath);
  if (url == null && resourcePath.startsWith(Platform.RESOURCE_PREFIX)) {
    url=loader.getResource(libname);
  }
  if (url == null) {
    String path=System.getProperty("java.class.path");
    if (loader instanceof URLClassLoader) {
      path=Arrays.asList(((URLClassLoader)loader).getURLs()).toString();
    }
    throw new IOException("Native library (" + resourcePath + ") not found in resource path ("+ path+ ")");
  }
  File lib=null;
  if (url.getProtocol().toLowerCase().equals("file")) {
    try {
      lib=new File(new URI(url.toString()));
    }
 catch (    URISyntaxException e) {
      lib=new File(url.getPath());
    }
    if (!lib.exists()) {
      throw new IOException("File URL " + url + " could not be properly decoded");
    }
  }
 else   if (!Boolean.getBoolean("jna.nounpack")) {
    InputStream is=loader.getResourceAsStream(resourcePath);
    if (is == null) {
      throw new IOException("Can't obtain InputStream for " + resourcePath);
    }
    FileOutputStream fos=null;
    try {
      File dir=getTempDir();
      lib=File.createTempFile(JNA_TMPLIB_PREFIX,Platform.isWindows() ? ".dll" : null,dir);
      lib.deleteOnExit();
      fos=new FileOutputStream(lib);
      int count;
      byte[] buf=new byte[1024];
      while ((count=is.read(buf,0,buf.length)) > 0) {
        fos.write(buf,0,count);
      }
    }
 catch (    IOException e) {
      throw new IOException("Failed to create temporary file for " + name + " library: "+ e.getMessage());
    }
 finally {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
      if (fos != null) {
        try {
          fos.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
  return lib;
}
