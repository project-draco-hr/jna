{
  String libname=System.mapLibraryName(name);
  String resourcePath=resourcePrefix + "/" + libname;
  URL url=loader.getResource(resourcePath);
  if (url == null && Platform.isMac()) {
    if (resourcePath.endsWith(".jnilib")) {
      resourcePath=resourcePath.substring(0,resourcePath.lastIndexOf(".jnilib")) + ".dylib";
    }
 else     if (resourcePath.endsWith(".dylib")) {
      resourcePath=resourcePath.substring(0,resourcePath.lastIndexOf(".dylib")) + ".jnilib";
    }
    url=loader.getResource(resourcePath);
  }
  if (url == null) {
    throw new IOException("JNA native support (" + resourcePath + ") not found in resource path ("+ System.getProperty("java.class.path")+ ")");
  }
  File lib=null;
  if (url.getProtocol().toLowerCase().equals("file")) {
    try {
      lib=new File(new URI(url.toString()));
    }
 catch (    URISyntaxException e) {
      lib=new File(url.getPath());
    }
    if (!lib.exists()) {
      throw new IOException("File URL " + url + " could not be properly decoded");
    }
  }
 else {
    InputStream is=loader.getResourceAsStream(resourcePath);
    if (is == null) {
      throw new IOException("Can't obtain InputStream for " + resourcePath);
    }
    FileOutputStream fos=null;
    try {
      File dir=getTempDir();
      lib=File.createTempFile(JNA_TMPLIB_PREFIX,Platform.isWindows() ? ".dll" : null,dir);
      lib.deleteOnExit();
      fos=new FileOutputStream(lib);
      int count;
      byte[] buf=new byte[1024];
      while ((count=is.read(buf,0,buf.length)) > 0) {
        fos.write(buf,0,count);
      }
    }
 catch (    IOException e) {
      throw new IOException("Failed to create temporary file for " + name + " library: "+ e.getMessage());
    }
 finally {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
      if (fos != null) {
        try {
          fos.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
  return lib;
}
