{
  if (type == Boolean.class)   type=boolean.class;
 else   if (type == Byte.class)   type=byte.class;
 else   if (type == Short.class)   type=short.class;
 else   if (type == Character.class)   type=char.class;
 else   if (type == Integer.class)   type=int.class;
 else   if (type == Long.class)   type=long.class;
 else   if (type == Float.class)   type=float.class;
 else   if (type == Double.class)   type=double.class;
 else   if (type == Void.class)   type=void.class;
  if (mapper != null && (mapper.getFromNativeConverter(type) != null || mapper.getToNativeConverter(type) != null)) {
    return CVT_TYPE_MAPPER;
  }
  if (Pointer.class.isAssignableFrom(type)) {
    return CVT_POINTER;
  }
  if (String.class == type) {
    return CVT_STRING;
  }
  if (WString.class.isAssignableFrom(type)) {
    return CVT_WSTRING;
  }
  if (Platform.HAS_BUFFERS && Buffers.isBuffer(type)) {
    return CVT_BUFFER;
  }
  if (Structure.class.isAssignableFrom(type)) {
    if (Structure.ByValue.class.isAssignableFrom(type)) {
      return CVT_STRUCTURE_BYVAL;
    }
    return CVT_STRUCTURE;
  }
  if (type.isArray()) {
switch (type.getName().charAt(1)) {
case 'Z':
      return CVT_ARRAY_BOOLEAN;
case 'B':
    return CVT_ARRAY_BYTE;
case 'S':
  return CVT_ARRAY_SHORT;
case 'C':
return CVT_ARRAY_CHAR;
case 'I':
return CVT_ARRAY_INT;
case 'J':
return CVT_ARRAY_LONG;
case 'F':
return CVT_ARRAY_FLOAT;
case 'D':
return CVT_ARRAY_DOUBLE;
default :
break;
}
}
if (type.isPrimitive()) {
return type == boolean.class ? CVT_BOOLEAN : CVT_DEFAULT;
}
if (Callback.class.isAssignableFrom(type)) {
return CVT_CALLBACK;
}
if (IntegerType.class.isAssignableFrom(type)) {
return CVT_INTEGER_TYPE;
}
if (PointerType.class.isAssignableFrom(type)) {
return CVT_POINTER_TYPE;
}
if (NativeMapped.class.isAssignableFrom(type)) {
return CVT_NATIVE_MAPPED;
}
return CVT_UNSUPPORTED;
}
