{
synchronized (libraries) {
    if (options.containsKey(type)) {
      return (Map)options.get(type);
    }
  }
  Class mappingClass=findEnclosingLibraryClass(type);
  if (mappingClass != null) {
    loadLibraryInstance(mappingClass);
  }
 else {
    mappingClass=type;
  }
synchronized (libraries) {
    if (options.containsKey(mappingClass)) {
      Map libraryOptions=(Map)options.get(mappingClass);
      options.put(type,libraryOptions);
      return libraryOptions;
    }
    Map libraryOptions=null;
    try {
      Field field=mappingClass.getField("OPTIONS");
      field.setAccessible(true);
      libraryOptions=(Map)field.get(null);
    }
 catch (    NoSuchFieldException e) {
      libraryOptions=Collections.EMPTY_MAP;
    }
catch (    Exception e) {
      throw new IllegalArgumentException("OPTIONS must be a public field of type java.util.Map (" + e + "): "+ mappingClass);
    }
    libraryOptions=new HashMap(libraryOptions);
    if (!libraryOptions.containsKey(Library.OPTION_TYPE_MAPPER)) {
      libraryOptions.put(Library.OPTION_TYPE_MAPPER,lookupField(mappingClass,"TYPE_MAPPER",TypeMapper.class));
    }
    if (!libraryOptions.containsKey(Library.OPTION_STRUCTURE_ALIGNMENT)) {
      libraryOptions.put(Library.OPTION_STRUCTURE_ALIGNMENT,lookupField(mappingClass,"STRUCTURE_ALIGNMENT",Integer.class));
    }
    if (!libraryOptions.containsKey(Library.OPTION_STRING_ENCODING)) {
      libraryOptions.put(Library.OPTION_STRING_ENCODING,lookupField(mappingClass,"STRING_ENCODING",String.class));
    }
    libraryOptions=cacheOptions(mappingClass,libraryOptions,null);
    if (type != mappingClass) {
      options.put(type,libraryOptions);
    }
    return libraryOptions;
  }
}
