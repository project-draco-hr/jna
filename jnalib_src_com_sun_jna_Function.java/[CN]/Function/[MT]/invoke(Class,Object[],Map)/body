{
  inArgs=concatenateVarArgs(inArgs);
  Object[] args={};
  if (inArgs != null) {
    if (inArgs.length > MAX_NARGS) {
      throw new UnsupportedOperationException("Maximum argument count is " + MAX_NARGS);
    }
    args=new Object[inArgs.length];
    System.arraycopy(inArgs,0,args,0,args.length);
  }
  TypeMapper mapper=(TypeMapper)options.get(Library.OPTION_TYPE_MAPPER);
  for (int i=0; i < args.length; i++) {
    args[i]=convertArgument(args[i],mapper);
  }
  Class nativeType=returnType;
  FromNativeConverter resultConverter=null;
  if (mapper != null) {
    resultConverter=mapper.getFromNativeConverter(returnType);
    if (resultConverter != null) {
      nativeType=resultConverter.nativeType();
    }
  }
  Object result=invoke(args,nativeType);
  if (resultConverter != null) {
    FromNativeContext context=new FunctionResultContext(returnType,this,inArgs);
    result=resultConverter.fromNative(result,context);
  }
  if (inArgs != null) {
    for (int i=0; i < inArgs.length; i++) {
      Object arg=inArgs[i];
      if (arg == null)       continue;
      if (arg instanceof Structure) {
        ((Structure)arg).read();
      }
 else       if (String[].class == arg.getClass()) {
        StringArray buf=(StringArray)args[i];
        String[] array=(String[])arg;
        for (int si=0; si < array.length; si++) {
          array[si]=buf.getPointer(si * Pointer.SIZE).getString(0);
        }
      }
 else       if (isStructureArray(arg.getClass())) {
        Structure[] ss=(Structure[])arg;
        for (int si=0; si < ss.length; si++) {
          ss[si].read();
        }
      }
    }
  }
  return result;
}
