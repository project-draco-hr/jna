{
  Object result=null;
  if (returnType == null || returnType == void.class || returnType == Void.class) {
    invokeVoid(callingConvention,args);
    result=null;
  }
 else   if (returnType == boolean.class || returnType == Boolean.class) {
    result=new Boolean(invokeInt(callingConvention,args) != 0);
  }
 else   if (returnType == byte.class || returnType == Byte.class) {
    result=new Byte((byte)invokeInt(callingConvention,args));
  }
 else   if (returnType == short.class || returnType == Short.class) {
    result=new Short((short)invokeInt(callingConvention,args));
  }
 else   if (returnType == char.class || returnType == Character.class) {
    result=new Character((char)invokeInt(callingConvention,args));
  }
 else   if (returnType == int.class || returnType == Integer.class) {
    result=new Integer(invokeInt(callingConvention,args));
  }
 else   if (returnType == long.class || returnType == Long.class) {
    result=new Long(invokeLong(callingConvention,args));
  }
 else   if (returnType == float.class || returnType == Float.class) {
    result=new Float(invokeFloat(callingConvention,args));
  }
 else   if (returnType == double.class || returnType == Double.class) {
    result=new Double(invokeDouble(callingConvention,args));
  }
 else   if (returnType == String.class) {
    result=invokeString(callingConvention,args,false);
  }
 else   if (returnType == WString.class) {
    result=new WString(invokeString(callingConvention,args,true));
  }
 else   if (Pointer.class.isAssignableFrom(returnType)) {
    result=invokePointer(callingConvention,args);
  }
 else   if (Structure.class.isAssignableFrom(returnType)) {
    result=invokePointer(callingConvention,args);
    if (result != null) {
      try {
        Structure s=(Structure)returnType.newInstance();
        s.useMemory((Pointer)result);
        s.read();
        result=s;
      }
 catch (      InstantiationException e) {
        throw new IllegalArgumentException("Instantiation of " + returnType + " failed: "+ e);
      }
catch (      IllegalAccessException e) {
        throw new IllegalArgumentException("Not allowed to instantiate " + returnType + ": "+ e);
      }
    }
  }
 else {
    throw new IllegalArgumentException("Unsupported return type " + returnType);
  }
  return result;
}
