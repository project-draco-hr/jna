{
  TypeMapper mapper=Native.getTypeMapper(cls);
  if (mapper != null) {
    ToNativeConverter nc=mapper.getToNativeConverter(cls);
    if (nc != null) {
      cls=nc.nativeType();
    }
  }
synchronized (typeInfoMap) {
    Object o=typeInfoMap.get(cls);
    if (o instanceof Pointer) {
      return (Pointer)o;
    }
    if (o instanceof FFIType) {
      return ((FFIType)o).getPointer();
    }
    if ((Platform.HAS_BUFFERS && Buffer.class.isAssignableFrom(cls)) || Callback.class.isAssignableFrom(cls)) {
      typeInfoMap.put(cls,FFITypes.ffi_type_pointer);
      return FFITypes.ffi_type_pointer;
    }
    if (Structure.class.isAssignableFrom(cls)) {
      if (obj == null)       obj=newInstance(cls,PLACEHOLDER_MEMORY);
      if (ByReference.class.isAssignableFrom(cls)) {
        typeInfoMap.put(cls,FFITypes.ffi_type_pointer);
        return FFITypes.ffi_type_pointer;
      }
      FFIType type=new FFIType((Structure)obj);
      typeInfoMap.put(cls,type);
      return type.getPointer();
    }
    if (NativeMapped.class.isAssignableFrom(cls)) {
      NativeMappedConverter c=NativeMappedConverter.getInstance(cls);
      return get(c.toNative(obj,new ToNativeContext()),c.nativeType());
    }
    if (cls.isArray()) {
      FFIType type=new FFIType(obj,cls);
      typeInfoMap.put(obj,type);
      return type.getPointer();
    }
    throw new IllegalArgumentException("Unsupported type " + cls);
  }
}
