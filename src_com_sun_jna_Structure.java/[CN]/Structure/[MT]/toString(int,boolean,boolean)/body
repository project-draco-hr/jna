{
  String LS=System.getProperty("line.separator");
  String name=format(getClass()) + "(" + getPointer()+ ")";
  if (!(getPointer() instanceof Memory)) {
    name+=" (" + size() + " bytes)";
  }
  String prefix="";
  for (int idx=0; idx < indent; idx++) {
    prefix+="  ";
  }
  String contents=LS;
  if (!showContents) {
    contents="...}";
  }
 else   for (Iterator i=fields().values().iterator(); i.hasNext(); ) {
    StructField sf=(StructField)i.next();
    Object value=getField(sf);
    String type=format(sf.type);
    String index="";
    contents+=prefix;
    if (sf.type.isArray() && value != null) {
      type=format(sf.type.getComponentType());
      index="[" + Array.getLength(value) + "]";
    }
    contents+="  " + type + " "+ sf.name+ index+ "@"+ Integer.toHexString(sf.offset);
    if (value instanceof Structure) {
      value=((Structure)value).toString(indent + 1,!(value instanceof Structure.ByReference),dumpMemory);
    }
    contents+="=";
    if (value instanceof Long) {
      contents+=Long.toHexString(((Long)value).longValue());
    }
 else     if (value instanceof Integer) {
      contents+=Integer.toHexString(((Integer)value).intValue());
    }
 else     if (value instanceof Short) {
      contents+=Integer.toHexString(((Short)value).shortValue());
    }
 else     if (value instanceof Byte) {
      contents+=Integer.toHexString(((Byte)value).byteValue());
    }
 else {
      contents+=String.valueOf(value).trim();
    }
    contents+=LS;
    if (!i.hasNext())     contents+=prefix + "}";
  }
  if (indent == 0 && dumpMemory) {
    final int BYTES_PER_ROW=4;
    contents+=LS + "memory dump" + LS;
    byte[] buf=getPointer().getByteArray(0,size());
    for (int i=0; i < buf.length; i++) {
      if ((i % BYTES_PER_ROW) == 0)       contents+="[";
      if (buf[i] >= 0 && buf[i] < 16)       contents+="0";
      contents+=Integer.toHexString(buf[i] & 0xFF);
      if ((i % BYTES_PER_ROW) == BYTES_PER_ROW - 1 && i < buf.length - 1)       contents+="]" + LS;
    }
    contents+="]";
  }
  return name + " {" + contents;
}
