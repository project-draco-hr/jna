{
  final int MAGIC=0xABEDCF23;
  DefaultTypeMapper mapper=new DefaultTypeMapper();
  mapper.addToNativeConverter(Boolean.class,new ToNativeConverter(){
    @Override public Object toNative(    Object value,    ToNativeContext ctx){
      return Integer.valueOf(Boolean.TRUE.equals(value) ? MAGIC : 0);
    }
    @Override public Class<?> nativeType(){
      return Integer.class;
    }
  }
);
  mapper.addFromNativeConverter(Boolean.class,new FromNativeConverter(){
    @Override public Object fromNative(    Object value,    FromNativeContext context){
      return Boolean.valueOf(((Integer)value).intValue() == MAGIC);
    }
    @Override public Class<?> nativeType(){
      return Integer.class;
    }
  }
);
  BooleanTestLibrary lib=Native.loadLibrary("testlib",BooleanTestLibrary.class,Collections.singletonMap(Library.OPTION_TYPE_MAPPER,mapper));
  assertEquals("Failed to convert integer return to boolean TRUE",true,lib.returnInt32Argument(true));
  assertEquals("Failed to convert integer return to boolean FALSE",false,lib.returnInt32Argument(false));
}
