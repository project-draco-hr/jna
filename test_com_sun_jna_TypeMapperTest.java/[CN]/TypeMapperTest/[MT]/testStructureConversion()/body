{
  DefaultTypeMapper mapper=new DefaultTypeMapper();
  TypeConverter converter=new TypeConverter(){
    @Override public Object toNative(    Object value,    ToNativeContext ctx){
      return Integer.valueOf(Boolean.TRUE.equals(value) ? 1 : 0);
    }
    @Override public Object fromNative(    Object value,    FromNativeContext context){
      return Boolean.valueOf(((Integer)value).intValue() == 1);
    }
    @Override public Class<?> nativeType(){
      return Integer.class;
    }
  }
;
  mapper.addTypeConverter(Boolean.class,converter);
  Native.loadLibrary("testlib",StructureTestLibrary.class,Collections.singletonMap(Library.OPTION_TYPE_MAPPER,mapper));
  StructureTestLibrary.TestStructure s=new StructureTestLibrary.TestStructure(mapper);
  assertEquals("Wrong native size",4,s.size());
  s.data=true;
  s.write();
  assertEquals("Wrong value written",1,s.getPointer().getInt(0));
  s.getPointer().setInt(0,0);
  s.read();
  assertFalse("Wrong value read",s.data);
}
