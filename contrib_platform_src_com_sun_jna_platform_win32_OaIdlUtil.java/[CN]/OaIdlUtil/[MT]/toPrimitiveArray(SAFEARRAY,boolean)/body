{
  Pointer dataPointer=sa.accessData();
  try {
    int dimensions=sa.getDimensionCount();
    int[] minIdx=new int[dimensions];
    int[] maxIdx=new int[dimensions];
    int[] elements=new int[dimensions];
    int[] cumElements=new int[dimensions];
    int varType=sa.getVarType().intValue();
    for (int i=0; i < dimensions; i++) {
      minIdx[i]=sa.getLBound(i);
      maxIdx[i]=sa.getUBound(i);
      elements[i]=maxIdx[i] - minIdx[i] + 1;
    }
    for (int i=dimensions - 1; i >= 0; i--) {
      if (i == (dimensions - 1)) {
        cumElements[i]=1;
      }
 else {
        cumElements[i]=cumElements[i + 1] * elements[i + 1];
      }
    }
    if (dimensions == 0) {
      throw new IllegalArgumentException("Supplied Array has no dimensions.");
    }
    int elementCount=cumElements[0] * elements[0];
    Object sourceArray;
switch (varType) {
case VT_UI1:
case VT_I1:
      sourceArray=dataPointer.getByteArray(0,elementCount);
    break;
case VT_BOOL:
case VT_UI2:
case VT_I2:
  sourceArray=dataPointer.getShortArray(0,elementCount);
break;
case VT_UI4:
case VT_UINT:
case VT_I4:
case VT_INT:
case VT_ERROR:
sourceArray=dataPointer.getIntArray(0,elementCount);
break;
case VT_R4:
sourceArray=dataPointer.getFloatArray(0,elementCount);
break;
case VT_R8:
case VT_DATE:
sourceArray=dataPointer.getDoubleArray(0,elementCount);
break;
case VT_BSTR:
sourceArray=dataPointer.getPointerArray(0,elementCount);
break;
case VT_VARIANT:
VARIANT variant=new VARIANT(dataPointer);
sourceArray=variant.toArray(elementCount);
break;
case VT_UNKNOWN:
case VT_DISPATCH:
case VT_CY:
case VT_DECIMAL:
case VT_RECORD:
default :
throw new IllegalStateException("Type not supported: " + varType);
}
Object targetArray=Array.newInstance(Object.class,elements);
toPrimitiveArray(sourceArray,targetArray,minIdx,maxIdx,elements,cumElements,varType,new int[0]);
return targetArray;
}
  finally {
sa.unaccessData();
if (destruct) {
sa.destroy();
}
}
}
