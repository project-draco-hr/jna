{
  ComInternetExplorerEventTest ieApp=factory.createObject(ComInternetExplorerEventTest.class);
  ieApp.setVisible(false);
  DWebBrowserEvents2_Listener listener1=new DWebBrowserEvents2_Listener();
  DWebBrowserEvents2_Listener listener2=new DWebBrowserEvents2_Listener();
  DWebBrowserEvents2_Listener listener3=new DWebBrowserEvents2_Listener();
  DWebBrowserEvents2_Listener listener4=new DWebBrowserEvents2_Listener();
  DWebBrowserEvents2_Listener listener5=new DWebBrowserEvents2_Listener();
  IComEventCallbackCookie cookie1=ieApp.advise(DWebBrowserEvents2EventTestIDispatch.class,listener1);
  IComEventCallbackCookie cookie2=ieApp.advise(DWebBrowserEvents2EventTestIUnknown.class,listener2);
  IComEventCallbackCookie cookie3=ieApp.advise(DWebBrowserEvents2EventTestUtilIDispatch.class,listener3);
  IComEventCallbackCookie cookie4=ieApp.advise(DWebBrowserEvents2EventTestUtilIUnknown.class,listener4);
  IComEventCallbackCookie cookie5=ieApp.advise(DWebBrowserEvents2EventTestSubclass.class,listener5);
  ieApp.Navigate2("https://github.com/");
  for (int i=0; i < 50; i++) {
    Thread.sleep(200);
    if (listener1.IDispatch && listener2.IUnknown && listener3.UtilIDispatch&& listener4.UtilIUnknown&& listener5.Subclass) {
      break;
    }
  }
  ieApp.unadvise(DWebBrowserEvents2EventTestIDispatch.class,cookie1);
  ieApp.unadvise(DWebBrowserEvents2EventTestIUnknown.class,cookie2);
  ieApp.unadvise(DWebBrowserEvents2EventTestUtilIDispatch.class,cookie3);
  ieApp.unadvise(DWebBrowserEvents2EventTestUtilIUnknown.class,cookie4);
  ieApp.unadvise(DWebBrowserEvents2EventTestSubclass.class,cookie5);
  ieApp.Quit();
  assertTrue(listener1.IDispatch);
  assertFalse(listener1.IUnknown);
  assertFalse(listener1.UtilIDispatch);
  assertFalse(listener1.UtilIUnknown);
  assertFalse(listener1.Subclass);
  assertFalse(listener2.IDispatch);
  assertTrue(listener2.IUnknown);
  assertFalse(listener2.UtilIDispatch);
  assertFalse(listener2.UtilIUnknown);
  assertFalse(listener2.Subclass);
  assertFalse(listener3.IDispatch);
  assertFalse(listener3.IUnknown);
  assertTrue(listener3.UtilIDispatch);
  assertFalse(listener3.UtilIUnknown);
  assertFalse(listener3.Subclass);
  assertFalse(listener4.IDispatch);
  assertFalse(listener4.IUnknown);
  assertFalse(listener4.UtilIDispatch);
  assertTrue(listener4.UtilIUnknown);
  assertFalse(listener4.Subclass);
  assertFalse(listener5.IDispatch);
  assertFalse(listener5.IUnknown);
  assertFalse(listener5.UtilIDispatch);
  assertFalse(listener5.UtilIUnknown);
  assertTrue(listener5.Subclass);
}
