{
  super(callback);
  TypeMapper mapper=Native.getTypeMapper(callback.getClass());
  Class[] nativeParamTypes;
  Class returnType;
  boolean ppc=Platform.isPPC();
  if (direct) {
    Method m=getCallbackMethod(callback);
    Class[] ptypes=m.getParameterTypes();
    for (int i=0; i < ptypes.length; i++) {
      if (ppc && (ptypes[i] == float.class || ptypes[i] == double.class)) {
        direct=false;
        break;
      }
      if (mapper != null && mapper.getFromNativeConverter(ptypes[i]) != null) {
        direct=false;
        break;
      }
    }
    if (mapper != null && mapper.getToNativeConverter(m.getReturnType()) != null) {
      direct=false;
    }
  }
  String encoding=Native.getStringEncoding(callback.getClass());
  if (direct) {
    method=getCallbackMethod(callback);
    nativeParamTypes=method.getParameterTypes();
    returnType=method.getReturnType();
    int flags=Native.CB_OPTION_DIRECT;
    if (callback instanceof DLLCallback) {
      flags|=Native.CB_OPTION_IN_DLL;
    }
    long peer=Native.createNativeCallback(callback,method,nativeParamTypes,returnType,callingConvention,flags,encoding);
    cbstruct=peer != 0 ? new Pointer(peer) : null;
  }
 else {
    if (callback instanceof CallbackProxy) {
      proxy=(CallbackProxy)callback;
    }
 else {
      proxy=new DefaultCallbackProxy(getCallbackMethod(callback),mapper,encoding);
    }
    nativeParamTypes=proxy.getParameterTypes();
    returnType=proxy.getReturnType();
    if (mapper != null) {
      for (int i=0; i < nativeParamTypes.length; i++) {
        FromNativeConverter rc=mapper.getFromNativeConverter(nativeParamTypes[i]);
        if (rc != null) {
          nativeParamTypes[i]=rc.nativeType();
        }
      }
      ToNativeConverter tn=mapper.getToNativeConverter(returnType);
      if (tn != null) {
        returnType=tn.nativeType();
      }
    }
    for (int i=0; i < nativeParamTypes.length; i++) {
      nativeParamTypes[i]=getNativeType(nativeParamTypes[i]);
      if (!isAllowableNativeType(nativeParamTypes[i])) {
        String msg="Callback argument " + nativeParamTypes[i] + " requires custom type conversion";
        throw new IllegalArgumentException(msg);
      }
    }
    returnType=getNativeType(returnType);
    if (!isAllowableNativeType(returnType)) {
      String msg="Callback return type " + returnType + " requires custom type conversion";
      throw new IllegalArgumentException(msg);
    }
    int flags=callback instanceof DLLCallback ? Native.CB_OPTION_IN_DLL : 0;
    long peer=Native.createNativeCallback(proxy,PROXY_CALLBACK_METHOD,nativeParamTypes,returnType,callingConvention,flags,encoding);
    cbstruct=peer != 0 ? new Pointer(peer) : null;
  }
}
