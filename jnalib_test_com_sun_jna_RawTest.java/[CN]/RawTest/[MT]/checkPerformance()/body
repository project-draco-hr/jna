{
  System.out.println("Checking performance of different access methods");
  final int SIZE=8 * 1024;
  ByteBuffer b=ByteBuffer.allocateDirect(SIZE);
  b.order(ByteOrder.nativeOrder());
  Pointer pb=Native.getDirectBufferPointer(b);
  String mname=Platform.isWindows() ? "msvcrt" : "m";
  MathInterface mlib=(MathInterface)Native.loadLibrary(mname,MathInterface.class);
  Function f=NativeLibrary.getInstance(mname).getFunction("cos");
  final int COUNT=100000;
  Object[] args={new Double(0)};
  double dresult;
  long start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    dresult=mlib.cos(0d);
  }
  long delta=System.currentTimeMillis() - start;
  System.out.println("cos (JNA interface): " + delta + "ms");
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    dresult=f.invokeDouble(args);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("cos (JNA function): " + delta + "ms");
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    dresult=MathLibrary.cos(0d);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("cos (JNA raw): " + delta + "ms");
  long types=pb.peer;
  b.putInt(0,(int)Structure.FFIType.get(double.class).peer);
  long cif=Native.ffi_prep_cif(0,1,Structure.FFIType.get(double.class).peer,types);
  long resp=pb.peer + 4;
  long argv=pb.peer + 12;
  if (Native.POINTER_SIZE == 4) {
    start=System.currentTimeMillis();
    for (int i=0; i < COUNT; i++) {
      b.putInt(8,(int)pb.peer + 16);
      b.putDouble(16,0);
      Native.ffi_call(cif,f.peer,resp,argv);
      dresult=b.getDouble(4);
    }
    delta=System.currentTimeMillis() - start;
    System.out.println("cos (JNI ffi): " + delta + "ms");
  }
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    dresult=JNI.cos(0d);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("cos (JNI): " + delta + "ms");
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    dresult=Math.cos(0d);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("cos (pure java): " + delta + "ms");
  Pointer presult;
  String cname=Platform.isWindows() ? "msvcrt" : "c";
  CInterface clib=(CInterface)Native.loadLibrary(cname,CInterface.class);
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    presult=clib.memset(null,0,0);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("memset (JNA interface): " + delta + "ms");
  f=NativeLibrary.getInstance(cname).getFunction("memset");
  args=new Object[]{null,new Integer(0),new Integer(0)};
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    presult=f.invokePointer(args);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("memset (JNA function): " + delta + "ms");
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    presult=CLibrary.memset((Pointer)null,0,0);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("memset (JNA raw): " + delta + "ms");
  if (Native.POINTER_SIZE == 4) {
    types=pb.peer;
    b.putInt(0,(int)Structure.FFIType.get(Pointer.class).peer);
    b.putInt(4,(int)Structure.FFIType.get(int.class).peer);
    b.putInt(8,(int)Structure.FFIType.get(int.class).peer);
    cif=Native.ffi_prep_cif(0,3,Structure.FFIType.get(Pointer.class).peer,types);
    resp=pb.peer + 12;
    argv=pb.peer + 16;
    start=System.currentTimeMillis();
    for (int i=0; i < COUNT; i++) {
      b.putInt(16,(int)pb.peer + 28);
      b.putInt(20,(int)pb.peer + 32);
      b.putInt(24,(int)pb.peer + 36);
      b.putInt(28,0);
      b.putInt(32,0);
      b.putInt(36,0);
      Native.ffi_call(cif,f.peer,resp,argv);
      b.getInt(4);
    }
    delta=System.currentTimeMillis() - start;
    System.out.println("memset (JNI ffi): " + delta + "ms");
  }
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    Pointer._setMemory(0L,0L,(byte)0);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("memset (JNI): " + delta + "ms");
  int iresult;
  String str="performance test";
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    iresult=clib.strlen(str);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("strlen (JNA interface): " + delta + "ms");
  f=NativeLibrary.getInstance(cname).getFunction("strlen");
  args=new Object[]{str};
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    iresult=f.invokeInt(args);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("strlen (JNA function): " + delta + "ms");
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    iresult=CLibrary.strlen(str);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("strlen (JNA raw - String): " + delta + "ms");
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    iresult=CLibrary.strlen(new NativeString(str).getPointer());
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("strlen (JNA raw - Pointer): " + delta + "ms");
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    iresult=CLibrary.strlen(Native.toByteArray(str));
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("strlen (JNA raw - byte[]): " + delta + "ms");
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    byte[] bytes=str.getBytes();
    b.position(0);
    b.put(bytes);
    b.put((byte)0);
    iresult=CLibrary.strlen(b);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("strlen (JNA raw - Buffer): " + delta + "ms");
  if (Native.POINTER_SIZE == 4) {
    types=pb.peer;
    b.putInt(0,(int)Structure.FFIType.get(Pointer.class).peer);
    cif=Native.ffi_prep_cif(0,1,Structure.FFIType.get(int.class).peer,types);
    resp=pb.peer + 4;
    argv=pb.peer + 8;
    start=System.currentTimeMillis();
    for (int i=0; i < COUNT; i++) {
      b.putInt(8,(int)pb.peer + 12);
      b.putInt(12,(int)pb.peer + 16);
      b.position(16);
      b.put(str.getBytes());
      b.put((byte)0);
      Native.ffi_call(cif,f.peer,resp,argv);
      iresult=b.getInt(4);
    }
    delta=System.currentTimeMillis() - start;
    System.out.println("strlen (JNI ffi): " + delta + "ms");
  }
  byte[] bulk=new byte[SIZE];
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    b.putInt(0,0);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("direct Buffer write: " + delta + "ms");
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    b.position(0);
    b.put(bulk);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("direct Buffer write (bulk): " + delta + "ms");
  Pointer p=new Memory(SIZE);
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    p.setInt(0,0);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("Memory write: " + delta + "ms");
  start=System.currentTimeMillis();
  for (int i=0; i < COUNT; i++) {
    p.write(0,bulk,0,bulk.length);
  }
  delta=System.currentTimeMillis() - start;
  System.out.println("Memory write (bulk): " + delta + "ms");
}
