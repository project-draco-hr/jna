{
  Memory securityDescriptorMemoryPointer=getSecurityDescriptorForFile(file.getAbsolutePath().replace('/','\\'));
  HANDLEByReference openedAccessToken=new HANDLEByReference();
  HANDLEByReference duplicatedToken=new HANDLEByReference();
  Win32Exception err=null;
  try {
    int desireAccess=TOKEN_IMPERSONATE | TOKEN_QUERY | TOKEN_DUPLICATE| STANDARD_RIGHTS_READ;
    HANDLE hProcess=Kernel32.INSTANCE.GetCurrentProcess();
    if (!Advapi32.INSTANCE.OpenProcessToken(hProcess,desireAccess,openedAccessToken)) {
      throw new Win32Exception(Kernel32.INSTANCE.GetLastError());
    }
    if (!Advapi32.INSTANCE.DuplicateToken(openedAccessToken.getValue(),SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation,duplicatedToken)) {
      throw new Win32Exception(Kernel32.INSTANCE.GetLastError());
    }
    GENERIC_MAPPING mapping=new GENERIC_MAPPING();
    mapping.genericRead=new DWORD(FILE_GENERIC_READ);
    mapping.genericWrite=new DWORD(FILE_GENERIC_WRITE);
    mapping.genericExecute=new DWORD(FILE_GENERIC_EXECUTE);
    mapping.genericAll=new DWORD(FILE_ALL_ACCESS);
    DWORDByReference rights=new DWORDByReference(new DWORD(permissionToCheck.getCode()));
    Advapi32.INSTANCE.MapGenericMask(rights,mapping);
    PRIVILEGE_SET privileges=new PRIVILEGE_SET(1);
    privileges.PrivilegeCount=new DWORD(0);
    DWORDByReference privilegeLength=new DWORDByReference(new DWORD(privileges.size()));
    DWORDByReference grantedAccess=new DWORDByReference();
    BOOLByReference result=new BOOLByReference();
    if (!Advapi32.INSTANCE.AccessCheck(securityDescriptorMemoryPointer,duplicatedToken.getValue(),rights.getValue(),mapping,privileges,privilegeLength,grantedAccess,result)) {
      throw new Win32Exception(Kernel32.INSTANCE.GetLastError());
    }
    return result.getValue().booleanValue();
  }
 catch (  Win32Exception e) {
    err=e;
    throw err;
  }
 finally {
    try {
      Kernel32Util.closeHandleRefs(openedAccessToken,duplicatedToken);
    }
 catch (    Win32Exception e) {
      if (err == null) {
        err=e;
      }
 else {
        err.addSuppressed(e);
      }
    }
    if (securityDescriptorMemoryPointer != null) {
      securityDescriptorMemoryPointer.clear();
    }
    if (err != null) {
      throw err;
    }
  }
}
