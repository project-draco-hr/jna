{
  boolean hasAccess=false;
  final Memory securityDescriptorMemoryPointer=getSecurityDescriptorForFile(file.getAbsolutePath().replaceAll("/","\\"));
  HANDLEByReference openedAccessToken=null;
  final HANDLEByReference duplicatedToken=new HANDLEByReference();
  try {
    openedAccessToken=new HANDLEByReference();
    final int desireAccess=WinNT.TOKEN_IMPERSONATE | WinNT.TOKEN_QUERY | WinNT.TOKEN_DUPLICATE| WinNT.STANDARD_RIGHTS_READ;
    if (!Advapi32.INSTANCE.OpenProcessToken(Kernel32.INSTANCE.GetCurrentProcess(),desireAccess,openedAccessToken)) {
      throw new Win32Exception(Kernel32.INSTANCE.GetLastError());
    }
    if (!Advapi32.INSTANCE.DuplicateToken(openedAccessToken.getValue(),WinNT.SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation,duplicatedToken)) {
      throw new Win32Exception(Kernel32.INSTANCE.GetLastError());
    }
    final WinNT.GENERIC_MAPPING mapping=new WinNT.GENERIC_MAPPING();
    mapping.genericRead=new WinDef.DWORD(WinNT.FILE_GENERIC_READ);
    mapping.genericWrite=new WinDef.DWORD(WinNT.FILE_GENERIC_WRITE);
    mapping.genericExecute=new WinDef.DWORD(WinNT.FILE_GENERIC_EXECUTE);
    mapping.genericAll=new WinDef.DWORD(WinNT.FILE_ALL_ACCESS);
    final WinDef.DWORDByReference rights=new WinDef.DWORDByReference(new WinDef.DWORD(permissionToCheck.getCode()));
    Advapi32.INSTANCE.MapGenericMask(rights,mapping);
    final WinNT.PRIVILEGE_SET privileges=new WinNT.PRIVILEGE_SET(1);
    privileges.PrivilegeCount=new WinDef.DWORD(0);
    final WinNT.DWORDByReference privilegeLength=new WinDef.DWORDByReference(new WinDef.DWORD(privileges.size()));
    final WinDef.DWORDByReference grantedAccess=new WinDef.DWORDByReference();
    final WinDef.BOOLByReference result=new WinDef.BOOLByReference();
    if (!Advapi32.INSTANCE.AccessCheck(securityDescriptorMemoryPointer,duplicatedToken.getValue(),rights.getValue(),mapping,privileges,privilegeLength,grantedAccess,result)) {
      throw new Win32Exception(Kernel32.INSTANCE.GetLastError());
    }
    hasAccess=result.getValue().booleanValue();
  }
  finally {
    if (openedAccessToken != null && openedAccessToken.getValue() != null) {
      Kernel32.INSTANCE.CloseHandle(openedAccessToken.getValue());
    }
    if (duplicatedToken != null && duplicatedToken.getValue() != null) {
      Kernel32.INSTANCE.CloseHandle(duplicatedToken.getValue());
    }
    if (securityDescriptorMemoryPointer != null) {
      securityDescriptorMemoryPointer.clear();
    }
  }
  return hasAccess;
}
