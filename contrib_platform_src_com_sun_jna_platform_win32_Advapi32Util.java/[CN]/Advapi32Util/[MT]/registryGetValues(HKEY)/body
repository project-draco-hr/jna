{
  IntByReference lpcValues=new IntByReference();
  IntByReference lpcMaxValueNameLen=new IntByReference();
  IntByReference lpcMaxValueLen=new IntByReference();
  int rc=Advapi32.INSTANCE.RegQueryInfoKey(hKey,null,null,null,null,null,null,lpcValues,lpcMaxValueNameLen,lpcMaxValueLen,null,null);
  if (rc != W32Errors.ERROR_SUCCESS) {
    throw new Win32Exception(rc);
  }
  TreeMap<String,Object> keyValues=new TreeMap<String,Object>();
  char[] name=new char[lpcMaxValueNameLen.getValue() + 1];
  byte[] data=new byte[lpcMaxValueLen.getValue()];
  for (int i=0; i < lpcValues.getValue(); i++) {
    IntByReference lpcchValueName=new IntByReference(lpcMaxValueNameLen.getValue() + 1);
    IntByReference lpcbData=new IntByReference(lpcMaxValueLen.getValue());
    IntByReference lpType=new IntByReference();
    rc=Advapi32.INSTANCE.RegEnumValue(hKey,i,name,lpcchValueName,null,lpType,data,lpcbData);
    if (rc != W32Errors.ERROR_SUCCESS) {
      throw new Win32Exception(rc);
    }
    String nameString=Native.toString(name);
    if (lpcbData.getValue() == 0) {
switch (lpType.getValue()) {
case WinNT.REG_BINARY:
{
          keyValues.put(nameString,new byte[0]);
          break;
        }
case WinNT.REG_SZ:
case WinNT.REG_EXPAND_SZ:
{
        keyValues.put(nameString,new char[0]);
        break;
      }
case WinNT.REG_MULTI_SZ:
{
      keyValues.put(nameString,new String[0]);
      break;
    }
case WinNT.REG_NONE:
{
    keyValues.put(nameString,null);
    break;
  }
default :
throw new RuntimeException("Unsupported empty type: " + lpType.getValue());
}
continue;
}
Memory byteData=new Memory(lpcbData.getValue());
byteData.write(0,data,0,lpcbData.getValue());
switch (lpType.getValue()) {
case WinNT.REG_QWORD:
{
keyValues.put(nameString,byteData.getLong(0));
break;
}
case WinNT.REG_DWORD:
{
keyValues.put(nameString,byteData.getInt(0));
break;
}
case WinNT.REG_SZ:
case WinNT.REG_EXPAND_SZ:
{
keyValues.put(nameString,byteData.getString(0,true));
break;
}
case WinNT.REG_BINARY:
{
keyValues.put(nameString,byteData.getByteArray(0,lpcbData.getValue()));
break;
}
case WinNT.REG_MULTI_SZ:
{
Memory stringData=new Memory(lpcbData.getValue());
stringData.write(0,data,0,lpcbData.getValue());
ArrayList<String> result=new ArrayList<String>();
int offset=0;
while (offset < stringData.size()) {
String s=stringData.getString(offset,true);
offset+=s.length() * Native.WCHAR_SIZE;
offset+=Native.WCHAR_SIZE;
if (s.length() == 0 && offset == stringData.size()) {
}
 else {
result.add(s);
}
}
keyValues.put(nameString,result.toArray(new String[0]));
break;
}
default :
throw new RuntimeException("Unsupported type: " + lpType.getValue());
}
}
return keyValues;
}
