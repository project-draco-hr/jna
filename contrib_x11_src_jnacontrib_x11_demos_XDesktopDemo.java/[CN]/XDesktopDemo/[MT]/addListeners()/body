{
  refreshButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      try {
        refreshDesktopsAndWindows();
      }
 catch (      X.X11Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  goToDesktopButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      int desktopNr=desktopList.getSelectedIndex();
      if (desktopNr >= 0) {
        try {
          display.switchDesktop(desktopNr);
          display.flush();
        }
 catch (        X.X11Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  goToWindowButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      X.Window window=getSelectedWindow();
      try {
        window.activate();
        display.flush();
      }
 catch (      X.X11Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  showDesktop.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      try {
        display.showingDesktop(true);
        display.flush();
      }
 catch (      X.X11Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  moveWindowToDesktopButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      X.Window window=getSelectedWindow();
      try {
        window.moveToDesktop(desktopList.getSelectedIndex());
        display.flush();
      }
 catch (      X.X11Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  moveWindowAndGoToDesktopButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      X.Window window=getSelectedWindow();
      try {
        window.moveToDesktop(desktopList.getSelectedIndex());
        window.activate();
        display.flush();
      }
 catch (      X.X11Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  closeWindowButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      X.Window window=getSelectedWindow();
      try {
        window.close();
        display.flush();
      }
 catch (      X.X11Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  showSubwindows.addActionListener(new ActionListener(){
    private void addWindowsToArea(    JTextArea area,    int depth,    X.Window win) throws X11Exception {
      X.Window[] subWindows=win.getSubwindows();
      String title=win.getTitle();
      if (title != null) {
        area.append(String.format("%" + depth + "s0x%08X - %s"," ",win.getID(),title));
      }
 else {
        area.append(String.format("%" + depth + "s0x%08X"," ",win.getID()));
      }
      area.append(System.getProperty("line.separator"));
      if (subWindows == null) {
        return;
      }
      for (int x=0; x < subWindows.length; x++) {
        addWindowsToArea(area,depth + 4,subWindows[x]);
      }
    }
    @Override public void actionPerformed(    ActionEvent event){
      X.Window window=getSelectedWindow();
      try {
        final JDialog jd=new JDialog();
        JPanel dialogPanel=new JPanel(new BorderLayout());
        jd.setSize(320,240);
        jd.setTitle("Subwindows");
        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        JTextArea area=new JTextArea();
        addWindowsToArea(area,1,window);
        dialogPanel.add(area,BorderLayout.CENTER);
        JButton closeButton=new JButton("Close");
        closeButton.addActionListener(new ActionListener(){
          @Override public void actionPerformed(          ActionEvent e){
            jd.dispose();
          }
        }
);
        dialogPanel.add(closeButton,BorderLayout.SOUTH);
        jd.add(dialogPanel);
        jd.setVisible(true);
      }
 catch (      X.X11Exception e) {
        e.printStackTrace();
      }
    }
  }
);
}
