{
  super(callback);
  Class type=callback.getClass();
  Class[] ifaces=type.getInterfaces();
  for (int i=0; i < ifaces.length; i++) {
    if (Callback.class.isAssignableFrom(ifaces[i])) {
      type=ifaces[i];
      break;
    }
  }
  TypeMapper mapper=null;
  Class declaring=type.getDeclaringClass();
  if (declaring != null) {
    mapper=Native.getTypeMapper(declaring);
  }
  Method m=getCallbackMethod(callback);
  if (callback instanceof CallbackProxy) {
    proxy=(CallbackProxy)callback;
  }
 else {
    proxy=new DefaultCallbackProxy(m,mapper);
  }
  Class[] nativeParamTypes=proxy.getParameterTypes();
  Class returnType=proxy.getReturnType();
  if (mapper != null) {
    for (int i=0; i < nativeParamTypes.length; i++) {
      FromNativeConverter rc=mapper.getFromNativeConverter(nativeParamTypes[i]);
      if (rc != null) {
        nativeParamTypes[i]=rc.nativeType();
      }
    }
    ToNativeConverter tn=mapper.getToNativeConverter(returnType);
    if (tn != null) {
      returnType=tn.nativeType();
    }
  }
  for (int i=0; i < nativeParamTypes.length; i++) {
    Class cls=nativeParamTypes[i];
    if (Structure.class.isAssignableFrom(cls)) {
      Structure.newInstance(cls);
      nativeParamTypes[i]=Pointer.class;
    }
 else     if (NativeMapped.class.isAssignableFrom(cls)) {
      nativeParamTypes[i]=new NativeMappedConverter(cls).nativeType();
    }
 else     if (cls == String.class || cls == WString.class) {
      nativeParamTypes[i]=Pointer.class;
    }
 else     if (!isAllowableNativeType(cls)) {
      throw new IllegalArgumentException("Callback argument " + cls + " requires custom type conversion");
    }
  }
  Method proxyMethod=getCallbackMethod(proxy);
  cbstruct=createNativeCallback(proxy,proxyMethod,nativeParamTypes,returnType,callingConvention);
}
