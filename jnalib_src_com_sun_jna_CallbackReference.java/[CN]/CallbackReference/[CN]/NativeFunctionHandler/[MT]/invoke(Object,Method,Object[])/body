{
  if (Library.Handler.OBJECT_TOSTRING.equals(method)) {
    String str="Proxy interface to " + function;
    Method m=(Method)options.get(Function.OPTION_INVOKING_METHOD);
    Class cls=findCallbackClass(m.getDeclaringClass());
    str+=" (" + cls.getName() + ")";
    return str;
  }
 else   if (Library.Handler.OBJECT_HASHCODE.equals(method)) {
    return new Integer(hashCode());
  }
 else   if (Library.Handler.OBJECT_EQUALS.equals(method)) {
    Object o=args[0];
    if (o != null && Proxy.isProxyClass(o.getClass())) {
      return Function.valueOf(Proxy.getInvocationHandler(o) == this);
    }
    return Boolean.FALSE;
  }
  if (Function.isVarArgs(method)) {
    args=Function.concatenateVarArgs(args);
  }
  return function.invoke(method.getReturnType(),args,options);
}
