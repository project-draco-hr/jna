{
  super(index,typeLibUtil);
  TypeLibDoc typeLibDoc=this.typeLibUtil.getDocumentation(index);
  String coClassName=typeLibDoc.getName();
  String docString=typeLibDoc.getDocString();
  this.createPackageName(packagename);
  this.createClassName(coClassName);
  this.setFilename(coClassName);
  String guidStr=this.typeLibUtil.getLibAttr().guid.toGuidString();
  int majorVerNum=this.typeLibUtil.getLibAttr().wMajorVerNum.intValue();
  int minorVerNum=this.typeLibUtil.getLibAttr().wMinorVerNum.intValue();
  String version=majorVerNum + "." + minorVerNum;
  this.createJavaDocHeader(guidStr,version,docString);
  this.createCLSID(guidStr);
  TypeInfoUtil typeInfoUtil=typeLibUtil.getTypeInfoUtil(index);
  TYPEATTR typeAttr=typeInfoUtil.getTypeAttr();
  int cFuncs=typeAttr.cFuncs.intValue();
  for (int i=0; i < cFuncs; i++) {
    FUNCDESC funcDesc=typeInfoUtil.getFuncDesc(i);
    MEMBERID memberID=funcDesc.memid;
    TypeInfoDoc typeInfoDoc2=typeInfoUtil.getDocumentation(memberID);
    String methodName=typeInfoDoc2.getName();
    TlbAbstractMethod method=null;
    if (!isReservedMethod(methodName)) {
      if (funcDesc.invkind.equals(INVOKEKIND.INVOKE_FUNC)) {
        method=new TlbFunction(index,typeLibUtil,funcDesc,typeInfoUtil);
      }
 else       if (funcDesc.invkind.equals(INVOKEKIND.INVOKE_PROPERTYGET)) {
        method=new TlbPropertyGet(index,typeLibUtil,funcDesc,typeInfoUtil);
      }
 else       if (funcDesc.invkind.equals(INVOKEKIND.INVOKE_PROPERTYPUT)) {
        method=new TlbPropertyPut(index,typeLibUtil,funcDesc,typeInfoUtil);
      }
 else       if (funcDesc.invkind.equals(INVOKEKIND.INVOKE_PROPERTYPUTREF)) {
      }
      this.content+=method.getClassBuffer();
      if (i < cFuncs - 1)       this.content+=CR;
    }
    typeInfoUtil.ReleaseFuncDesc(funcDesc);
  }
  this.createContent(this.content);
}
