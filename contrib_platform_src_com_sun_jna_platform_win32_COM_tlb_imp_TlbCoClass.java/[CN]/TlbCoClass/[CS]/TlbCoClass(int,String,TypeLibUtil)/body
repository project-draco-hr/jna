{
  super(index,typeLibUtil,null);
  TypeInfoUtil typeInfoUtil=typeLibUtil.getTypeInfoUtil(index);
  TypeLibDoc typeLibDoc=this.typeLibUtil.getDocumentation(index);
  String docString=typeLibDoc.getDocString();
  if (typeLibDoc.getName().length() > 0)   this.name=typeLibDoc.getName();
  this.logInfo("Type of kind 'CoClass' found: " + this.name);
  this.createPackageName(packagename);
  this.createClassName(this.name);
  this.setFilename(this.name);
  String guidStr=this.typeLibUtil.getLibAttr().guid.toGuidString();
  int majorVerNum=this.typeLibUtil.getLibAttr().wMajorVerNum.intValue();
  int minorVerNum=this.typeLibUtil.getLibAttr().wMinorVerNum.intValue();
  String version=majorVerNum + "." + minorVerNum;
  String clsid=typeInfoUtil.getTypeAttr().guid.toGuidString();
  this.createJavaDocHeader(guidStr,version,docString);
  this.createCLSID(clsid);
  this.createCLSIDName(this.name);
  TYPEATTR typeAttr=typeInfoUtil.getTypeAttr();
  int cImplTypes=typeAttr.cImplTypes.intValue();
  String interfaces="";
  for (int i=0; i < cImplTypes; i++) {
    HREFTYPE refTypeOfImplType=typeInfoUtil.getRefTypeOfImplType(i);
    ITypeInfo refTypeInfo=typeInfoUtil.getRefTypeInfo(refTypeOfImplType);
    TypeInfoUtil refTypeInfoUtil=new TypeInfoUtil(refTypeInfo);
    this.createFunctions(refTypeInfoUtil);
    TypeInfoDoc documentation=refTypeInfoUtil.getDocumentation(new MEMBERID(-1));
    interfaces+=documentation.getName();
    if (i < cImplTypes - 1)     interfaces+=", ";
  }
  this.createInterfaces(interfaces);
  this.createContent(this.content);
}
