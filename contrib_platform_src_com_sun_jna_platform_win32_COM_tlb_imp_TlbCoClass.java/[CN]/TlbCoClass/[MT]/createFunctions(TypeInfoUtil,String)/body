{
  TYPEATTR typeAttr=typeInfoUtil.getTypeAttr();
  int cFuncs=typeAttr.cFuncs.intValue();
  for (int i=0; i < cFuncs; i++) {
    FUNCDESC funcDesc=typeInfoUtil.getFuncDesc(i);
    TlbAbstractMethod method=null;
    if (funcDesc.invkind.value == INVOKEKIND.INVOKE_FUNC.value) {
      if (this.isVTableMode()) {
        method=new TlbFunctionVTable(i,index,typeLibUtil,funcDesc,typeInfoUtil);
      }
 else {
        method=new TlbFunctionDispId(i,index,typeLibUtil,funcDesc,typeInfoUtil);
      }
    }
 else     if (funcDesc.invkind.value == INVOKEKIND.INVOKE_PROPERTYGET.value) {
      method=new TlbPropertyGet(i,index,typeLibUtil,funcDesc,typeInfoUtil);
    }
 else     if (funcDesc.invkind.value == INVOKEKIND.INVOKE_PROPERTYPUT.value) {
      method=new TlbPropertyPut(i,index,typeLibUtil,funcDesc,typeInfoUtil);
    }
 else     if (funcDesc.invkind.value == INVOKEKIND.INVOKE_PROPERTYPUTREF.value) {
      method=new TlbPropertyPut(i,index,typeLibUtil,funcDesc,typeInfoUtil);
    }
    if (!isReservedMethod(method.getMethodName())) {
      this.content+=method.getClassBuffer();
      if (i < cFuncs - 1)       this.content+=CR;
    }
    typeInfoUtil.ReleaseFuncDesc(funcDesc);
  }
}
