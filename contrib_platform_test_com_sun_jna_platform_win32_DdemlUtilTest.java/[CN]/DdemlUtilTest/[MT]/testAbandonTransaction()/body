{
  final String serviceName="TestService";
  final String topicName="TestTopic";
  final String testExecute="Execute?????????????????????";
  final CountDownLatch allTransactionsInvoked=new CountDownLatch(1);
  final CountDownLatch executesProcessed=new CountDownLatch(3);
  StandaloneDdeClient client=null;
  StandaloneDdeClient server=null;
  try {
    client=new StandaloneDdeClient(){
      private final XactCompleteHandler xactCompleteHandler=new XactCompleteHandler(){
        public void onXactComplete(        int transactionType,        int dataFormat,        HCONV hConv,        HSZ topic,        HSZ item,        HDDEDATA hdata,        ULONG_PTR transactionIdentifier,        ULONG_PTR statusFlag){
          executesProcessed.countDown();
        }
      }
;
{
        registerXactCompleteHandler(xactCompleteHandler);
        this.initialize(Ddeml.APPCMD_CLIENTONLY | Ddeml.CBF_SKIP_REGISTRATIONS | Ddeml.CBF_SKIP_UNREGISTRATIONS);
      }
    }
;
    server=new StandaloneDdeClient(){
      private final ConnectHandler connectHandler=new ConnectHandler(){
        public boolean onConnect(        int transactionType,        HSZ topic,        HSZ service,        Ddeml.CONVCONTEXT convcontext,        boolean sameInstance){
          return topicName.equals(queryString(topic));
        }
      }
;
      private final ExecuteHandler executeHandler=new ExecuteHandler(){
        public int onExecute(        int transactionType,        HCONV hconv,        HSZ topic,        Ddeml.HDDEDATA commandStringData){
          try {
            if (!allTransactionsInvoked.await(5,TimeUnit.SECONDS)) {
              return Ddeml.DDE_FNOTPROCESSED;
            }
            Pointer[] pointer=new Pointer[]{accessData(commandStringData,null)};
            try {
              String commandString=pointer[0].getWideString(0);
              if (testExecute.equals(commandString) && queryString(topic).equals(topicName)) {
                return Ddeml.DDE_FACK;
              }
            }
  finally {
synchronized (pointer) {
                unaccessData(commandStringData);
              }
            }
            return Ddeml.DDE_FNOTPROCESSED;
          }
 catch (          InterruptedException ex) {
            Logger.getLogger(DdemlUtilTest.class.getName()).log(Level.SEVERE,null,ex);
            return Ddeml.DDE_FNOTPROCESSED;
          }
        }
      }
;
{
        registerConnectHandler(connectHandler);
        registerExecuteHandler(executeHandler);
        this.initialize(Ddeml.APPCMD_FILTERINITS | Ddeml.CBF_SKIP_ALLNOTIFICATIONS);
      }
    }
;
    server.nameService(serviceName,Ddeml.DNS_REGISTER);
    IDdeConnection con=client.connect(serviceName,topicName,null);
    WinDef.DWORDByReference result=new WinDef.DWORDByReference();
    con.execute(testExecute,Ddeml.TIMEOUT_ASYNC,result,null);
    con.execute(testExecute,Ddeml.TIMEOUT_ASYNC,result,null);
    int transactionId2=result.getValue().intValue();
    con.execute(testExecute,Ddeml.TIMEOUT_ASYNC,result,null);
    con.abandonTransaction(transactionId2);
    allTransactionsInvoked.countDown();
    assertFalse(executesProcessed.await(2,TimeUnit.SECONDS));
    assertThat(executesProcessed.getCount(),is(1L));
  }
  finally {
    closeQuitely(client);
    closeQuitely(server);
  }
}
