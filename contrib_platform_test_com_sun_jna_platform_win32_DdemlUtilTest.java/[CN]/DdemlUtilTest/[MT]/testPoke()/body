{
  final String serviceName="TestService";
  final String topicName="TestTopic";
  final String itemName="TestItem";
  final String testValue="Execute?????????????????????";
  final CountDownLatch pokeReceived=new CountDownLatch(1);
  StandaloneDdeClient client=null;
  StandaloneDdeClient server=null;
  try {
    client=new StandaloneDdeClient(){
{
        this.initialize(Ddeml.APPCMD_CLIENTONLY | Ddeml.CBF_SKIP_REGISTRATIONS | Ddeml.CBF_SKIP_UNREGISTRATIONS);
      }
    }
;
    server=new StandaloneDdeClient(){
      private final ConnectHandler connectHandler=new ConnectHandler(){
        public boolean onConnect(        int transactionType,        HSZ topic,        HSZ service,        Ddeml.CONVCONTEXT convcontext,        boolean sameInstance){
          return topicName.equals(queryString(topic));
        }
      }
;
      private final PokeHandler pokeHandler=new PokeHandler(){
        @Override public int onPoke(        int transactionType,        int dataFormat,        HCONV hconv,        HSZ topic,        HSZ item,        Ddeml.HDDEDATA hdata){
          Pointer[] pointer=new Pointer[]{accessData(hdata,null)};
          try {
            String commandString=pointer[0].getWideString(0);
            if (testValue.equals(commandString) && queryString(topic).equals(topicName) && queryString(item).equals(itemName)) {
              pokeReceived.countDown();
              return Ddeml.DDE_FACK;
            }
          }
  finally {
synchronized (pointer) {
            }
          }
          return Ddeml.DDE_FNOTPROCESSED;
        }
      }
;
{
        registerConnectHandler(connectHandler);
        registerPokeHandler(pokeHandler);
        this.initialize(Ddeml.APPCMD_FILTERINITS | Ddeml.CBF_SKIP_ALLNOTIFICATIONS);
      }
    }
;
    server.nameService(serviceName,Ddeml.DNS_REGISTER);
    IDdeConnection con=client.connect(serviceName,topicName,null);
    Memory mem=new Memory((testValue.length() + 1) * 2);
    mem.setWideString(0,testValue);
    con.poke(mem,(int)mem.size(),itemName,WinUser.CF_UNICODETEXT,5 * 1000,null,null);
    assertTrue(pokeReceived.await(5,TimeUnit.SECONDS));
  }
  finally {
    closeQuitely(client);
    closeQuitely(server);
  }
}
