{
  LONG testLONG=new LONG(42);
  VARIANT resultLONG=Convert.toVariant(testLONG);
  assertEquals(42,resultLONG.longValue());
  assertEquals(Integer.class,Convert.toJavaObject(resultLONG,Object.class,fact,true).getClass());
  assertEquals(42,Convert.toJavaObject(resultLONG,int.class,fact,true));
  assertEquals(42,Convert.toJavaObject(resultLONG,Integer.class,fact,true));
  SHORT testSHORT=new SHORT(42);
  VARIANT resultSHORT=Convert.toVariant(testSHORT);
  assertEquals(42,resultSHORT.longValue());
  assertEquals(Short.class,Convert.toJavaObject(resultSHORT,Object.class,fact,true).getClass());
  assertEquals((short)42,Convert.toJavaObject(resultSHORT,short.class,fact,true));
  assertEquals((short)42,Convert.toJavaObject(resultSHORT,Short.class,fact,true));
  BYTE testBYTE=new BYTE(42);
  VARIANT resultBYTE=Convert.toVariant(testBYTE);
  Byte testByteObj=42;
  VARIANT resultByteObj=Convert.toVariant(testByteObj);
  byte testByte=42;
  VARIANT resultByte=Convert.toVariant(testByte);
  assertEquals(42,resultBYTE.longValue());
  assertEquals(42,resultByteObj.longValue());
  assertEquals(42,resultByte.longValue());
  assertEquals(Byte.class,Convert.toJavaObject(resultBYTE,Object.class,fact,true).getClass());
  assertEquals(Byte.class,Convert.toJavaObject(resultByteObj,Object.class,fact,true).getClass());
  assertEquals(Byte.class,Convert.toJavaObject(resultByte,Object.class,fact,true).getClass());
  assertEquals((byte)42,Convert.toJavaObject(resultBYTE,byte.class,fact,true));
  assertEquals((byte)42,Convert.toJavaObject(resultByteObj,byte.class,fact,true));
  assertEquals((byte)42,Convert.toJavaObject(resultByte,byte.class,fact,true));
  assertEquals((byte)42,Convert.toJavaObject(resultBYTE,Byte.class,fact,true));
  assertEquals((byte)42,Convert.toJavaObject(resultByteObj,Byte.class,fact,true));
  assertEquals((byte)42,Convert.toJavaObject(resultByte,Byte.class,fact,true));
  Character testCharObj=42;
  VARIANT resultCharObj=Convert.toVariant(testCharObj);
  char testChar=42;
  VARIANT resultChar=Convert.toVariant(testChar);
  assertEquals(42,resultCharObj.longValue());
  assertEquals(42,resultChar.longValue());
  assertEquals(testCharObj,(Character)Convert.toJavaObject(resultCharObj,Object.class,fact,true));
  assertEquals(testCharObj,(Character)Convert.toJavaObject(resultChar,Object.class,fact,true));
  assertEquals(testCharObj,(Character)Convert.toJavaObject(resultCharObj,char.class,fact,true));
  assertEquals(testCharObj,(Character)Convert.toJavaObject(resultChar,char.class,fact,true));
  assertEquals(testCharObj,(Character)Convert.toJavaObject(resultCharObj,Character.class,fact,true));
  assertEquals(testCharObj,(Character)Convert.toJavaObject(resultChar,Character.class,fact,true));
  CHAR testCHAR=new CHAR(42);
  VARIANT resultCHAR=Convert.toVariant(testCHAR);
  assertEquals(42,resultCHAR.longValue());
  assertEquals((byte)42,Convert.toJavaObject(resultCHAR,Object.class,fact,true));
  assertEquals((byte)42,Convert.toJavaObject(resultCHAR,byte.class,fact,true));
  assertEquals((byte)42,Convert.toJavaObject(resultCHAR,Byte.class,fact,true));
  Short testShortObj=42;
  VARIANT resultShortObj=Convert.toVariant(testShortObj);
  short testShort=42;
  VARIANT resultShort=Convert.toVariant(testShort);
  assertEquals(42,resultShortObj.longValue());
  assertEquals(42,resultShort.longValue());
  assertEquals((short)42,Convert.toJavaObject(resultShortObj,Object.class,fact,true));
  assertEquals((short)42,Convert.toJavaObject(resultShort,Object.class,fact,true));
  assertEquals((short)42,Convert.toJavaObject(resultShortObj,short.class,fact,true));
  assertEquals((short)42,Convert.toJavaObject(resultShort,short.class,fact,true));
  assertEquals((short)42,Convert.toJavaObject(resultShortObj,Short.class,fact,true));
  assertEquals((short)42,Convert.toJavaObject(resultShort,Short.class,fact,true));
  Integer testIntegerObj=42;
  VARIANT resultIntegerObj=Convert.toVariant(testIntegerObj);
  int testInteger=42;
  VARIANT resultInteger=Convert.toVariant(testInteger);
  assertEquals(42,resultIntegerObj.longValue());
  assertEquals(42,resultInteger.longValue());
  assertEquals((int)42,Convert.toJavaObject(resultIntegerObj,Object.class,fact,true));
  assertEquals((int)42,Convert.toJavaObject(resultInteger,Object.class,fact,true));
  assertEquals((int)42,Convert.toJavaObject(resultIntegerObj,int.class,fact,true));
  assertEquals((int)42,Convert.toJavaObject(resultInteger,int.class,fact,true));
  assertEquals((int)42,Convert.toJavaObject(resultIntegerObj,Integer.class,fact,true));
  assertEquals((int)42,Convert.toJavaObject(resultInteger,Integer.class,fact,true));
  Long testLongObj=42L;
  VARIANT resultLongObj=Convert.toVariant(testLongObj);
  long testLong=42;
  VARIANT resultLong=Convert.toVariant(testLong);
  assertEquals(42,resultLongObj.longValue());
  assertEquals(42,resultLong.longValue());
  assertEquals((long)42,Convert.toJavaObject(resultLongObj,Object.class,fact,true));
  assertEquals((long)42,Convert.toJavaObject(resultLong,Object.class,fact,true));
  assertEquals((long)42,Convert.toJavaObject(resultLongObj,long.class,fact,true));
  assertEquals((long)42,Convert.toJavaObject(resultLong,long.class,fact,true));
  assertEquals((long)42,Convert.toJavaObject(resultLongObj,Long.class,fact,true));
  assertEquals((long)42,Convert.toJavaObject(resultLong,Long.class,fact,true));
}
