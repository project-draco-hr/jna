{
  VARIANT_BOOL testVariantBOOL=new VARIANT_BOOL(true);
  VARIANT resultVariantBOOL=Convert.toVariant(testVariantBOOL);
  assertEquals(true,resultVariantBOOL.booleanValue());
  assertEquals(true,Convert.toJavaObject(resultVariantBOOL,Object.class,fact,true));
  assertEquals(true,Convert.toJavaObject(resultVariantBOOL,Boolean.class,fact,true));
  assertEquals(true,Convert.toJavaObject(resultVariantBOOL,boolean.class,fact,true));
  BOOL testBOOL=new BOOL(true);
  VARIANT resultBOOL=Convert.toVariant(testBOOL);
  assertEquals(true,resultBOOL.booleanValue());
  assertEquals(true,Convert.toJavaObject(resultBOOL,Object.class,fact,true));
  assertEquals(true,Convert.toJavaObject(resultBOOL,Boolean.class,fact,true));
  assertEquals(true,Convert.toJavaObject(resultBOOL,boolean.class,fact,true));
  Boolean testBooleanObj=true;
  VARIANT resultBooleanObj=Convert.toVariant(testBooleanObj);
  boolean testBoolean=true;
  VARIANT resultBoolean=Convert.toVariant(testBoolean);
  assertEquals(true,resultBooleanObj.booleanValue());
  assertEquals(true,resultBoolean.booleanValue());
  assertEquals(true,Convert.toJavaObject(resultBooleanObj,Object.class,fact,true));
  assertEquals(true,Convert.toJavaObject(resultBoolean,Object.class,fact,true));
  assertEquals(true,Convert.toJavaObject(resultBooleanObj,boolean.class,fact,true));
  assertEquals(true,Convert.toJavaObject(resultBoolean,boolean.class,fact,true));
  assertEquals(true,Convert.toJavaObject(resultBooleanObj,Boolean.class,fact,true));
  assertEquals(true,Convert.toJavaObject(resultBoolean,Boolean.class,fact,true));
}
