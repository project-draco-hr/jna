{
  if (null == value || value.getVarType().intValue() == VT_EMPTY || value.getVarType().intValue() == VT_NULL) {
    return null;
  }
  if (targetClass != null && (!targetClass.isAssignableFrom(Object.class))) {
    if (targetClass.isAssignableFrom(value.getClass())) {
      return value;
    }
    Object vobj=value.getValue();
    if (vobj != null && (targetClass.isAssignableFrom(vobj.getClass()))) {
      return vobj;
    }
  }
  if (value.getVarType().intValue() == (VT_BYREF | VT_VARIANT)) {
    value=(VARIANT)value.getValue();
  }
  if (targetClass == null || (targetClass.isAssignableFrom(Object.class))) {
    targetClass=null;
    int varType=value.getVarType().intValue();
switch (value.getVarType().intValue()) {
case VT_UI1:
case VT_I1:
case VT_BYREF | VT_UI1:
case VT_BYREF | VT_I1:
      targetClass=Byte.class;
    break;
case VT_I2:
case VT_BYREF | VT_I2:
  targetClass=Short.class;
break;
case VT_UI2:
case VT_BYREF | VT_UI2:
targetClass=Character.class;
break;
case VT_INT:
case VT_UINT:
case VT_UI4:
case VT_I4:
case VT_BYREF | VT_I4:
case VT_BYREF | VT_UI4:
case VT_BYREF | VT_INT:
case VT_BYREF | VT_UINT:
targetClass=Integer.class;
break;
case VT_UI8:
case VT_I8:
case VT_BYREF | VT_I8:
case VT_BYREF | VT_UI8:
targetClass=Long.class;
break;
case VT_R4:
case VT_BYREF | VT_R4:
targetClass=Float.class;
break;
case VT_R8:
case VT_BYREF | VT_R8:
targetClass=Double.class;
break;
case VT_BOOL:
case VT_BYREF | VT_BOOL:
targetClass=Boolean.class;
break;
case VT_ERROR:
case VT_BYREF | VT_ERROR:
targetClass=WinDef.SCODE.class;
break;
case VT_CY:
case VT_BYREF | VT_CY:
targetClass=OaIdl.CURRENCY.class;
break;
case VT_DATE:
case VT_BYREF | VT_DATE:
targetClass=Date.class;
break;
case VT_BSTR:
case VT_BYREF | VT_BSTR:
targetClass=String.class;
break;
case VT_UNKNOWN:
case VT_BYREF | VT_UNKNOWN:
targetClass=com.sun.jna.platform.win32.COM.IUnknown.class;
break;
case VT_DISPATCH:
case VT_BYREF | VT_DISPATCH:
targetClass=IDispatch.class;
break;
case VT_BYREF | VT_VARIANT:
targetClass=Variant.class;
break;
case VT_BYREF:
targetClass=PVOID.class;
break;
case VT_BYREF | VT_DECIMAL:
targetClass=OaIdl.DECIMAL.class;
break;
case VT_RECORD:
default :
if ((varType & VT_ARRAY) > 0 || ((varType & VT_SAFEARRAY) > 0)) {
targetClass=OaIdl.SAFEARRAY.class;
}
}
}
Object result;
if (Byte.class.equals(targetClass) || byte.class.equals(targetClass)) {
result=value.byteValue();
}
 else if (Short.class.equals(targetClass) || short.class.equals(targetClass)) {
result=value.shortValue();
}
 else if (Character.class.equals(targetClass) || char.class.equals(targetClass)) {
result=(char)value.intValue();
}
 else if (Integer.class.equals(targetClass) || int.class.equals(targetClass)) {
result=value.intValue();
}
 else if (Long.class.equals(targetClass) || long.class.equals(targetClass) || IComEnum.class.isAssignableFrom(targetClass)) {
result=value.longValue();
}
 else if (Float.class.equals(targetClass) || float.class.equals(targetClass)) {
result=value.floatValue();
}
 else if (Double.class.equals(targetClass) || double.class.equals(targetClass)) {
result=value.doubleValue();
}
 else if (Boolean.class.equals(targetClass) || boolean.class.equals(targetClass)) {
result=value.booleanValue();
}
 else if (Date.class.equals(targetClass)) {
result=value.dateValue();
}
 else if (String.class.equals(targetClass)) {
result=value.stringValue();
}
 else if (value.getValue() instanceof com.sun.jna.platform.win32.COM.IDispatch) {
com.sun.jna.platform.win32.COM.IDispatch d=(com.sun.jna.platform.win32.COM.IDispatch)value.getValue();
Object proxy=factory.createProxy(targetClass,d);
if (!addReference) {
int n=d.Release();
}
result=proxy;
}
 else {
result=value.getValue();
}
if (IComEnum.class.isAssignableFrom(targetClass)) {
return targetClass.cast(Convert.toComEnum((Class<? extends IComEnum>)targetClass,result));
}
 else {
return result;
}
}
