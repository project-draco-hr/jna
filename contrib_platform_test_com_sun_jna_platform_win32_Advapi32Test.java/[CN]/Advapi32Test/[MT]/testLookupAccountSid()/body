{
  String sidString=EVERYONE;
  PSIDByReference sid=new PSIDByReference();
  assertTrue("Failed to create sid",Advapi32.INSTANCE.ConvertStringSidToSid(sidString,sid));
  PSID value=sid.getValue();
  try {
    int sidLength=Advapi32.INSTANCE.GetLengthSid(value);
    assertTrue("Non-positive sid length",sidLength > 0);
    IntByReference cchName=new IntByReference();
    IntByReference cchReferencedDomainName=new IntByReference();
    PointerByReference peUse=new PointerByReference();
    assertFalse(Advapi32.INSTANCE.LookupAccountSid(null,value,null,cchName,null,cchReferencedDomainName,peUse));
    assertEquals(W32Errors.ERROR_INSUFFICIENT_BUFFER,Kernel32.INSTANCE.GetLastError());
    assertTrue(cchName.getValue() > 0);
    assertTrue(cchReferencedDomainName.getValue() > 0);
    char[] referencedDomainName=new char[cchReferencedDomainName.getValue()];
    char[] name=new char[cchName.getValue()];
    assertTrue(Advapi32.INSTANCE.LookupAccountSid(null,value,name,cchName,referencedDomainName,cchReferencedDomainName,peUse));
    assertEquals(5,peUse.getPointer().getInt(0));
    String nameString=Native.toString(name);
    String referencedDomainNameString=Native.toString(referencedDomainName);
    assertTrue(nameString.length() > 0);
    if (AbstractWin32TestSupport.isEnglishLocale) {
      assertEquals("Everyone",nameString);
    }
    assertTrue(referencedDomainNameString.length() == 0);
  }
  finally {
    Kernel32Util.freeLocalMemory(value.getPointer());
  }
}
