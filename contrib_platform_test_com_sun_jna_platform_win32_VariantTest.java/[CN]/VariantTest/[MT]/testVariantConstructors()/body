{
  VARIANT variant;
  String testString="TeST$??";
  BSTR bstr=OleAuto.INSTANCE.SysAllocString(testString);
  variant=new VARIANT(bstr);
  assertThat(variant.getValue(),instanceOf(BSTR.class));
  assertThat(((BSTR)variant.getValue()).getValue(),equalTo(testString));
  assertThat(variant.stringValue(),equalTo(testString));
  variant=new VARIANT(testString);
  assertThat(variant.getValue(),instanceOf(BSTR.class));
  assertThat(((BSTR)variant.getValue()).getValue(),equalTo(testString));
  assertThat(variant.stringValue(),equalTo(testString));
  OleAuto.INSTANCE.SysFreeString(bstr);
  OleAuto.INSTANCE.SysFreeString((BSTR)variant.getValue());
  BOOL boolTrue=new WinDef.BOOL(true);
  variant=new VARIANT(Variant.VARIANT_TRUE);
  assertThat(variant.getValue(),instanceOf(VARIANT_BOOL.class));
  assertThat(((VARIANT_BOOL)variant.getValue()).shortValue(),equalTo((short)0xFFFF));
  assertThat(variant.booleanValue(),equalTo(true));
  variant=new VARIANT(boolTrue);
  assertThat(variant.getValue(),instanceOf(VARIANT_BOOL.class));
  assertThat(((VARIANT_BOOL)variant.getValue()).shortValue(),equalTo((short)0xFFFF));
  assertThat(variant.booleanValue(),equalTo(true));
  int testInt=4223;
  LONG testIntWin=new LONG(testInt);
  variant=new VARIANT(testIntWin);
  assertThat(variant.getValue(),instanceOf(LONG.class));
  assertThat(((LONG)variant.getValue()).intValue(),equalTo(testInt));
  assertThat(variant.intValue(),equalTo(testInt));
  variant=new VARIANT(testInt);
  assertThat(variant.getValue(),instanceOf(LONG.class));
  assertThat(((LONG)variant.getValue()).intValue(),equalTo(testInt));
  assertThat(variant.intValue(),equalTo(testInt));
  short testShort=23;
  SHORT testShortWin=new SHORT(testShort);
  variant=new VARIANT(testShortWin);
  assertThat(variant.getValue(),instanceOf(SHORT.class));
  assertThat(((SHORT)variant.getValue()).shortValue(),equalTo(testShort));
  assertThat(variant.shortValue(),equalTo(testShort));
  variant=new VARIANT(testShort);
  assertThat(variant.getValue(),instanceOf(SHORT.class));
  assertThat(((SHORT)variant.getValue()).shortValue(),equalTo(testShort));
  assertThat(variant.shortValue(),equalTo(testShort));
  long testLong=4223L + Integer.MAX_VALUE;
  variant=new VARIANT(testLong);
  assertThat(variant.getValue(),instanceOf(LONGLONG.class));
  assertThat(((LONGLONG)variant.getValue()).longValue(),equalTo(testLong));
  assertThat(variant.longValue(),equalTo(testLong));
  Date testDate=new Date(2042 - 1900,2,3,23,0,0);
  variant=new VARIANT(testDate);
  assertThat(variant.getValue(),instanceOf(DATE.class));
  assertThat(variant.dateValue(),equalTo(testDate));
  byte testByte=42;
  BYTE testByteWin=new BYTE(testByte);
  CHAR testByteWin2=new CHAR(testByte);
  variant=new VARIANT(testByte);
  assertThat(variant.getValue(),instanceOf(BYTE.class));
  assertThat(((BYTE)variant.getValue()).byteValue(),equalTo(testByte));
  assertThat(variant.byteValue(),equalTo(testByte));
  variant=new VARIANT(testByteWin);
  assertThat(variant.getValue(),instanceOf(BYTE.class));
  assertThat(((BYTE)variant.getValue()).byteValue(),equalTo(testByte));
  assertThat(variant.byteValue(),equalTo(testByte));
  variant=new VARIANT(testByteWin2);
  assertThat(variant.getValue(),instanceOf(CHAR.class));
  assertThat(((CHAR)variant.getValue()).byteValue(),equalTo(testByte));
  assertThat(variant.byteValue(),equalTo(testByte));
  variant=new VARIANT(testByteWin2);
  assertThat(variant.getValue(),instanceOf(CHAR.class));
  assertThat(((CHAR)variant.getValue()).byteValue(),equalTo(testByte));
  assertThat(variant.byteValue(),equalTo(testByte));
  double testDouble=42.23;
  variant=new VARIANT(testDouble);
  assertThat(variant.getValue(),instanceOf(Double.class));
  assertThat(variant.doubleValue(),equalTo(testDouble));
  float testFloat=42.23f;
  variant=new VARIANT(testFloat);
  assertThat(variant.getValue(),instanceOf(Float.class));
  assertThat(variant.floatValue(),equalTo(testFloat));
  char testChar=42 + Short.MAX_VALUE;
  variant=new VARIANT(testChar);
  assertThat(variant.getValue(),instanceOf(USHORT.class));
  assertThat(((USHORT)variant.getValue()).intValue(),equalTo((int)testChar));
  assertThat(variant.intValue(),equalTo((int)testChar));
}
