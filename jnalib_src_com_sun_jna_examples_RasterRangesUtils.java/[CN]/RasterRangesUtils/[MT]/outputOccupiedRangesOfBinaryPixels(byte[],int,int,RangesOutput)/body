{
  Set rects=new HashSet();
  Set prevLine=Collections.EMPTY_SET;
  int scanlineBytes=binaryBits.length / h;
  for (int row=0; row < h; row++) {
    Set curLine=new TreeSet(COMPARATOR);
    int rowOffsetBytes=row * scanlineBytes;
    int startCol=-1;
    for (int byteCol=0; byteCol < scanlineBytes; byteCol++) {
      int firstByteCol=byteCol << 3;
      byte byteColBits=binaryBits[rowOffsetBytes + byteCol];
      if (byteColBits == 0) {
        if (startCol >= 0) {
          curLine.add(new Rectangle(startCol,row,firstByteCol - startCol,1));
          startCol=-1;
        }
      }
 else       if (byteColBits == 0xff) {
        if (startCol < 0) {
          startCol=firstByteCol;
        }
      }
 else {
        for (int subCol=0; subCol < 8; subCol++) {
          int col=firstByteCol | subCol;
          if ((byteColBits & subColMasks[subCol]) != 0) {
            if (startCol < 0) {
              startCol=col;
            }
          }
 else {
            if (startCol >= 0) {
              curLine.add(new Rectangle(startCol,row,col - startCol,1));
              startCol=-1;
            }
          }
        }
      }
    }
    if (startCol >= 0) {
      curLine.add(new Rectangle(startCol,row,w - startCol,1));
    }
    Set unmerged=mergeRects(prevLine,curLine);
    rects.addAll(unmerged);
    prevLine=curLine;
  }
  rects.addAll(prevLine);
  for (Iterator i=rects.iterator(); i.hasNext(); ) {
    Rectangle r=(Rectangle)i.next();
    if (!out.outputRange(r.x,r.y,r.width,r.height)) {
      return false;
    }
  }
  return true;
}
