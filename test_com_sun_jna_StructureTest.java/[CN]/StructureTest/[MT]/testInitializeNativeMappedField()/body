{
  final long VALUE=20;
  final NativeLong INITIAL=new NativeLong(VALUE);
class TestStructure extends Structure {
{
      setFieldOrder(new String[]{"nl","uninitialized"});
    }
{
      setAlignType(ALIGN_NONE);
    }
    public NativeLong nl=INITIAL;
    public NativeLong uninitialized;
    protected List getFieldOrder(){
      return Arrays.asList(new String[]{"nl","uninitialized"});
    }
  }
  TestStructure ts=new TestStructure();
  TestStructure ts2=new TestStructure();
  assertEquals("Wrong value in field",VALUE,ts.nl.longValue());
  assertSame("Initial value overwritten",INITIAL,ts.nl);
  assertEquals("Wrong field value before write",VALUE,ts.nl.longValue());
  assertNotNull("Uninitialized field should be initialized",ts.uninitialized);
  assertNotNull("Uninitialized field should be initialized (cached)",ts2.uninitialized);
  assertEquals("Wrong initialized value",0,ts.uninitialized.longValue());
  ts.write();
  assertEquals("Wrong field value written",VALUE,ts.getPointer().getNativeLong(0).longValue());
  assertEquals("Wrong field value written (2)",0,ts.getPointer().getNativeLong(NativeLong.SIZE).longValue());
  ts.read();
  assertEquals("Wrong field value",VALUE,ts.nl.longValue());
  assertEquals("Wrong field value (2)",0,ts.uninitialized.longValue());
}
