{
  final DefaultTypeMapper mapper=new DefaultTypeMapper();
class TestField {
  }
class TestStructure extends Structure {
    public TestField field;
    protected List getFieldOrder(){
      return Arrays.asList(new String[]{"field"});
    }
    public TestStructure(){
      DefaultTypeMapper m=mapper;
      m.addTypeConverter(TestField.class,new TypeConverter(){
        public Object fromNative(        Object value,        FromNativeContext context){
          return new TestField();
        }
        public Class nativeType(){
          return String.class;
        }
        public Object toNative(        Object value,        ToNativeContext ctx){
          return value == null ? null : value.toString();
        }
      }
);
      setTypeMapper(m);
    }
  }
  Structure s=new TestStructure();
  assertEquals("Wrong type mapper: " + s,mapper,s.getTypeMapper());
}
