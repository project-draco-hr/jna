{
class TestTypeMapper extends DefaultTypeMapper {
{
      TypeConverter tc=new TypeConverter(){
        @Override public Class<?> nativeType(){
          return int.class;
        }
        @Override public Object fromNative(        Object nativeValue,        FromNativeContext c){
          return Boolean.valueOf(nativeValue.equals(Integer.valueOf(0)));
        }
        @Override public Object toNative(        Object value,        ToNativeContext c){
          return Integer.valueOf(Boolean.TRUE.equals(value) ? -1 : 0);
        }
      }
;
      addTypeConverter(boolean.class,tc);
      addTypeConverter(Boolean.class,tc);
    }
  }
  final TestTypeMapper m=new TestTypeMapper();
class TestStructure extends Structure {
    public boolean field;
    @Override protected List<String> getFieldOrder(){
      return Arrays.asList("field");
    }
    public TestStructure(){
      super(m);
    }
    public TestStructure(    TypeMapper m){
      super(m);
    }
  }
  Structure ts=new TestStructure();
  Structure ts2=new TestStructure();
  Structure ts3=new TestStructure(m);
  assertSame("Structure layout should be cached with custom type mapper",ts.fields(),ts2.fields());
  assertSame("Structure layout should be cached with custom type mapper, regardless of constructor type",ts.fields(),ts3.fields());
}
