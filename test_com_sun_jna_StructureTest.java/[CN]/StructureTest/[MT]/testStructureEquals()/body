{
class OtherStructure extends Structure {
    public int first;
    public int[] second=new int[4];
    public Pointer[] third=new Pointer[4];
    @Override protected List<String> getFieldOrder(){
      return Arrays.asList("first","second","third");
    }
  }
class TestStructure extends Structure {
    public int first;
    public int[] second=new int[4];
    public Pointer[] third=new Pointer[4];
    @Override protected List<String> getFieldOrder(){
      return Arrays.asList("first","second","third");
    }
    public TestStructure(){
    }
    public TestStructure(    Pointer p){
      super(p);
    }
  }
  OtherStructure s0=new OtherStructure();
  TestStructure s1=new TestStructure();
  TestStructure s2=new TestStructure(s1.getPointer());
  TestStructure s3=new TestStructure(s2.getPointer());
  TestStructure s4=new TestStructure();
  assertFalse("Structures of different classes with same fields are not equal",s1.equals(s0));
  assertFalse("Structures of different classes with same fields are not equal (reflexive)",s0.equals(s1));
  assertFalse("Compare to null failed",s1.equals(null));
  assertTrue("Equals is not reflexive",s1.equals(s1));
  assertTrue("Equals failed on structures with same pointer",s1.equals(s2));
  assertTrue("Equals is not symmetric",s2.equals(s1));
  assertTrue("Equals is not transitive",s1.equals(s2) && s2.equals(s3) && s1.equals(s3));
  assertFalse("Compare to different structure failed",s1.equals(s4));
}
