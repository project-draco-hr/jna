{
class ContainingStructure extends Structure {
    public StructureFromPointer inner;
    @Override protected List<String> getFieldOrder(){
      return Arrays.asList("inner");
    }
  }
  StructureFromPointer o=new StructureFromPointer();
  Charset charset=Charset.forName(o.getStringEncoding());
  final String VALUE=getName() + charset.decode(charset.encode(UNICODE));
  final WString WVALUE=new WString(VALUE);
  o.s=VALUE;
  o.ws=WVALUE;
  o.write();
  StructureFromPointer t=new StructureFromPointer(o.getPointer());
  assertEquals("String field not initialized",VALUE,t.s);
  assertEquals("WString field not initialized",WVALUE,t.ws);
  ContainingStructure outer=new ContainingStructure();
  outer.inner=t;
  outer.write();
  assertEquals("Inner String field corrupted",VALUE,outer.inner.s);
  assertEquals("Inner WString field corrupted",WVALUE,outer.inner.ws);
  outer.inner.read();
  assertEquals("Native memory behind Inner String field not updated",VALUE,outer.inner.s);
  assertEquals("Native memory behind Inner WString field not updated",WVALUE,outer.inner.ws);
}
