{
class TestStructure extends Structure {
    public TestStructure(){
      allocateMemory();
    }
    public boolean z;
    public byte b;
    public char c;
    public short s;
    public int i;
    public long l;
    public float f;
    public double d;
    public byte[] ba=new byte[3];
    public char[] ca=new char[3];
    public short[] sa=new short[3];
    public int[] ia=new int[3];
    public long[] la=new long[3];
    public float[] fa=new float[3];
    public double[] da=new double[3];
    public PublicTestStructure nested;
  }
  TestStructure s=new TestStructure();
  s.z=true;
  s.b=1;
  s.c=2;
  s.s=3;
  s.i=4;
  s.l=5;
  s.f=6.0f;
  s.d=7.0;
  s.nested.x=1;
  s.nested.y=2;
  for (int i=0; i < 3; i++) {
    s.ba[i]=(byte)(8 + i);
    s.ca[i]=(char)(11 + i);
    s.sa[i]=(short)(14 + i);
    s.ia[i]=17 + i;
    s.la[i]=23 + i;
    s.fa[i]=(float)26 + i;
    s.da[i]=(double)29 + i;
  }
  s.write();
  Pointer p=s.getPointer();
  s=new TestStructure();
  s.useMemory(p);
  s.read();
  assertEquals("Wrong boolean field value after write/read",s.z,true);
  assertEquals("Wrong byte field value after write/read",s.b,1);
  assertEquals("Wrong char field value after write/read",s.c,2);
  assertEquals("Wrong short field value after write/read",s.s,3);
  assertEquals("Wrong int field value after write/read",s.i,4);
  assertEquals("Wrong long field value after write/read",s.l,5);
  assertEquals("Wrong float field value after write/read",s.f,6.0f,0f);
  assertEquals("Wrong double field value after write/read",s.d,7.0,0d);
  assertEquals("Wrong nested struct field value after write/read (x)",s.nested.x,1);
  assertEquals("Wrong nested struct field value after write/read (y)",s.nested.y,2);
  for (int i=0; i < 3; i++) {
    assertEquals("Wrong byte array field value after write/read",s.ba[i],(byte)(8 + i));
    assertEquals("Wrong char array field value after write/read",s.ca[i],(char)(11 + i));
    assertEquals("Wrong short array field value after write/read",s.sa[i],(short)(14 + i));
    assertEquals("Wrong int array field value after write/read",s.ia[i],17 + i);
    assertEquals("Wrong long array field value after write/read",s.la[i],23 + i);
    assertEquals("Wrong float array field value after write/read",s.fa[i],(float)26 + i,0f);
    assertEquals("Wrong double array field value after write/read",s.da[i],(double)29 + i,0d);
  }
  int[] ia=s.ia;
  s.read();
  assertTrue("Array field reference should be unchanged",ia == s.ia);
}
