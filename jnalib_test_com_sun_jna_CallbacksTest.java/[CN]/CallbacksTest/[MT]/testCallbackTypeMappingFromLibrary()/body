{
  final DefaultTypeMapper mapper=new DefaultTypeMapper();
  Map options=new HashMap(){
{
      put(Library.OPTION_TYPE_MAPPER,mapper);
    }
  }
;
  CallbackTestLibrary lib=loadCallbackTestLibrary(options);
  TypeConverter converter=new TypeConverter(){
    public Object fromNative(    Object value,    FromNativeContext context){
      return new Float(((Integer)value).intValue());
    }
    public Class nativeType(){
      return Integer.class;
    }
    public Object toNative(    Object value,    ToNativeContext ctx){
      return new Integer(Math.round(((Float)value).floatValue()));
    }
  }
;
  mapper.addTypeConverter(float.class,converter);
  CallbackTestLibrary.Int32Callback cb=new CallbackTestLibrary.Int32Callback(){
    public float callback(    float arg,    float arg2){
      return arg + arg2;
    }
  }
;
  assertEquals("Wrong type mapper for callback class",mapper,Native.getTypeMapper(CallbackTestLibrary.Int32Callback.class));
  assertEquals("Wrong type mapper for callback object",mapper,Native.getTypeMapper(cb.getClass()));
  assertEquals("Wrong type mapper used in callback invocation",-2,lib.callInt32Callback(cb,-1,-1),0);
}
