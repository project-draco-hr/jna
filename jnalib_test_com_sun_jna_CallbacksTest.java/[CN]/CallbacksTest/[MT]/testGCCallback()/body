{
  final boolean[] called={false};
  TestLibrary.VoidCallback cb=new TestLibrary.VoidCallback(){
    public void callback(){
      called[0]=true;
    }
  }
;
  lib.callVoidCallback(cb);
  assertTrue("Callback not called",called[0]);
  Map refs=new WeakHashMap(CallbackReference.callbackMap);
  refs.putAll(CallbackReference.directCallbackMap);
  assertTrue("Callback not cached",refs.containsKey(cb));
  CallbackReference ref=(CallbackReference)refs.get(cb);
  refs=ref.proxy != null ? CallbackReference.callbackMap : CallbackReference.directCallbackMap;
  Pointer cbstruct=ref.cbstruct;
  cb=null;
  System.gc();
  for (int i=0; i < 100 && (ref.get() != null || refs.containsValue(ref)); ++i) {
    try {
      Thread.sleep(10);
    }
  finally {
    }
  }
  assertNull("Callback not GC'd",ref.get());
  assertFalse("Callback still in map",refs.containsValue(ref));
  ref=null;
  System.gc();
  for (int i=0; i < 100 && (cbstruct.peer != 0 || refs.size() > 0); ++i) {
    refs.size();
    try {
      Thread.sleep(10);
      System.gc();
    }
  finally {
    }
  }
  assertEquals("Callback trampoline not freed",0,cbstruct.peer);
}
