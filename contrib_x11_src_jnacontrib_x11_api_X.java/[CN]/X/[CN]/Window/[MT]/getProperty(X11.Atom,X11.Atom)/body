{
  X11.AtomByReference xa_ret_type_ref=new X11.AtomByReference();
  IntByReference ret_format_ref=new IntByReference();
  NativeLongByReference ret_nitems_ref=new NativeLongByReference();
  NativeLongByReference ret_bytes_after_ref=new NativeLongByReference();
  PointerByReference ret_prop_ref=new PointerByReference();
  NativeLong long_offset=new NativeLong(0);
  NativeLong long_length=new NativeLong(MAX_PROPERTY_VALUE_LEN / 4);
  if (x11.XGetWindowProperty(display.x11Display,x11Window,xa_prop_name,long_offset,long_length,false,xa_prop_type,xa_ret_type_ref,ret_format_ref,ret_nitems_ref,ret_bytes_after_ref,ret_prop_ref) != X11.Success) {
    String prop_name=x11.XGetAtomName(display.x11Display,xa_prop_name);
    throw new X11Exception("Cannot get " + prop_name + " property.");
  }
  X11.Atom xa_ret_type=xa_ret_type_ref.getValue();
  Pointer ret_prop=ret_prop_ref.getValue();
  if (xa_ret_type == null) {
    return null;
  }
  if (xa_ret_type == null) {
    return null;
  }
  if (xa_ret_type == null) {
    return null;
  }
  if (xa_ret_type == null || xa_prop_type == null || !xa_ret_type.toNative().equals(xa_prop_type.toNative())) {
    x11.XFree(ret_prop);
    String prop_name=x11.XGetAtomName(display.x11Display,xa_prop_name);
    throw new X11Exception("Invalid type of " + prop_name + " property");
  }
  int ret_format=ret_format_ref.getValue();
  long ret_nitems=ret_nitems_ref.getValue().longValue();
  int nbytes;
  if (ret_format == 32)   nbytes=Native.LONG_SIZE;
 else   if (ret_format == 16)   nbytes=Native.LONG_SIZE / 2;
 else   if (ret_format == 8)   nbytes=1;
 else   if (ret_format == 0)   nbytes=0;
 else   throw new X11Exception("Invalid return format");
  int length=Math.min((int)ret_nitems * nbytes,MAX_PROPERTY_VALUE_LEN);
  byte[] ret=ret_prop.getByteArray(0,length);
  x11.XFree(ret_prop);
  return ret;
}
