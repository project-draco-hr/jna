{
  int idx=1;
  Pointer dataPointer;
  SAFEARRAY sa;
  long elementSize;
  Object[] objectResult;
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_BOOL),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(2L));
  dataPointer=sa.accessData();
  sa.putElement(true,idx);
  short[] shortResult=dataPointer.getShortArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat((Boolean)sa.getElement(idx),equalTo(true));
  assertThat(shortResult[idx],equalTo((short)0xFFFF));
  assertThat((Short)dataPointer.getShort(idx * elementSize),equalTo((short)0xFFFF));
  assertThat((Boolean)objectResult[idx],equalTo(true));
  sa.unaccessData();
  sa.destroy();
  byte testByte=67;
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_UI1),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(1L));
  dataPointer=sa.accessData();
  sa.putElement(testByte,idx);
  byte[] byteResult=dataPointer.getByteArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat((Byte)sa.getElement(idx),equalTo(testByte));
  assertThat(dataPointer.getByte(idx * elementSize),equalTo(testByte));
  assertThat(byteResult[idx],equalTo(testByte));
  assertThat((Byte)objectResult[idx],equalTo(testByte));
  sa.unaccessData();
  sa.destroy();
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_I1),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(1L));
  dataPointer=sa.accessData();
  sa.putElement(testByte,idx);
  byteResult=dataPointer.getByteArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat((Byte)sa.getElement(idx),equalTo(testByte));
  assertThat(dataPointer.getByte(idx * elementSize),equalTo(testByte));
  assertThat(byteResult[idx],equalTo(testByte));
  assertThat((Byte)objectResult[idx],equalTo(testByte));
  sa.unaccessData();
  sa.destroy();
  short testShort=Short.MAX_VALUE - 1;
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_UI2),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(2L));
  dataPointer=sa.accessData();
  sa.putElement(testShort,idx);
  shortResult=dataPointer.getShortArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat((Short)sa.getElement(idx),equalTo(testShort));
  assertThat(dataPointer.getShort(idx * elementSize),equalTo(testShort));
  assertThat(shortResult[idx],equalTo(testShort));
  assertThat((Short)objectResult[idx],equalTo(testShort));
  sa.unaccessData();
  sa.destroy();
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_I2),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(2L));
  dataPointer=sa.accessData();
  sa.putElement(testShort,idx);
  shortResult=dataPointer.getShortArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat((Short)sa.getElement(idx),equalTo(testShort));
  assertThat(dataPointer.getShort(idx * elementSize),equalTo(testShort));
  assertThat(shortResult[idx],equalTo(testShort));
  assertThat((Short)objectResult[idx],equalTo(testShort));
  sa.unaccessData();
  sa.destroy();
  int testInt=Integer.MAX_VALUE - 1;
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_UI4),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(4L));
  dataPointer=sa.accessData();
  sa.putElement(testInt,idx);
  int[] intResult=dataPointer.getIntArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat((Integer)sa.getElement(idx),equalTo(testInt));
  assertThat(dataPointer.getInt(idx * elementSize),equalTo(testInt));
  assertThat(intResult[idx],equalTo(testInt));
  assertThat((Integer)objectResult[idx],equalTo(testInt));
  sa.unaccessData();
  sa.destroy();
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_I4),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(4L));
  dataPointer=sa.accessData();
  sa.putElement(testInt,idx);
  intResult=dataPointer.getIntArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat((Integer)sa.getElement(idx),equalTo(testInt));
  assertThat(dataPointer.getInt(idx * elementSize),equalTo(testInt));
  assertThat(intResult[idx],equalTo(testInt));
  assertThat((Integer)objectResult[idx],equalTo(testInt));
  sa.unaccessData();
  sa.destroy();
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_UINT),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(4L));
  dataPointer=sa.accessData();
  sa.putElement(testInt,idx);
  intResult=dataPointer.getIntArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat((Integer)sa.getElement(idx),equalTo(testInt));
  assertThat(dataPointer.getInt(idx * elementSize),equalTo(testInt));
  assertThat(intResult[idx],equalTo(testInt));
  assertThat((Integer)objectResult[idx],equalTo(testInt));
  sa.unaccessData();
  sa.destroy();
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_INT),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(4L));
  dataPointer=sa.accessData();
  sa.putElement(testInt,idx);
  intResult=dataPointer.getIntArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat((Integer)sa.getElement(idx),equalTo(testInt));
  assertThat(dataPointer.getInt(idx * elementSize),equalTo(testInt));
  assertThat(intResult[idx],equalTo(testInt));
  assertThat((Integer)objectResult[idx],equalTo(testInt));
  sa.unaccessData();
  sa.destroy();
  SCODE testSCODE=new SCODE(47);
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_ERROR),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(4L));
  dataPointer=sa.accessData();
  sa.putElement(testSCODE,idx);
  intResult=dataPointer.getIntArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat((SCODE)sa.getElement(idx),equalTo(testSCODE));
  assertThat(dataPointer.getInt(idx * elementSize),equalTo(47));
  assertThat(intResult[idx],equalTo(47));
  assertThat((SCODE)objectResult[idx],equalTo(testSCODE));
  sa.unaccessData();
  sa.destroy();
  float testFloat=42.23f;
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_R4),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(4L));
  dataPointer=sa.accessData();
  sa.putElement(testFloat,idx);
  float[] floatResult=dataPointer.getFloatArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat((Float)sa.getElement(idx),equalTo(testFloat));
  assertThat((Float)dataPointer.getFloat(idx * elementSize),equalTo(testFloat));
  assertThat(floatResult[idx],equalTo(testFloat));
  assertThat((Float)objectResult[idx],equalTo(testFloat));
  sa.unaccessData();
  sa.destroy();
  double testDouble=42.23d;
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_R8),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(8L));
  dataPointer=sa.accessData();
  sa.putElement(testDouble,idx);
  double[] doubleResult=dataPointer.getDoubleArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat((Double)sa.getElement(idx),equalTo(testDouble));
  assertThat((Double)dataPointer.getDouble(idx * elementSize),equalTo(testDouble));
  assertThat(doubleResult[idx],equalTo(testDouble));
  assertThat((Double)objectResult[idx],equalTo(testDouble));
  sa.unaccessData();
  sa.destroy();
  Date testDate=new Date(1923,1,1,5,0,0);
  DATE testDATE=new DATE(testDate);
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_DATE),2);
  elementSize=sa.getElemsize();
  assertThat(elementSize,equalTo(8L));
  dataPointer=sa.accessData();
  sa.putElement(testDATE,idx);
  doubleResult=dataPointer.getDoubleArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat(((DATE)sa.getElement(idx)).date,equalTo(testDATE.date));
  assertThat((Double)dataPointer.getDouble(idx * elementSize),equalTo(testDATE.date));
  assertThat(((DATE)sa.getElement(idx)).getAsJavaDate(),equalTo(testDate));
  assertThat(doubleResult[idx],equalTo(testDATE.date));
  assertThat((Date)objectResult[idx],equalTo(testDate));
  sa.unaccessData();
  sa.destroy();
  String testString="????????AE!";
  sa=SAFEARRAY.createSafeArray(new WTypes.VARTYPE(VT_BSTR),2);
  elementSize=sa.getElemsize();
  dataPointer=sa.accessData();
  sa.putElement(testString,idx);
  Pointer[] pointerResult=dataPointer.getPointerArray(0,2);
  objectResult=(Object[])toPrimitiveArray(sa,false);
  assertThat(((String)sa.getElement(idx)),equalTo(testString));
  assertThat(new BSTR(dataPointer.getPointer(idx * elementSize)).getValue(),equalTo(testString));
  assertThat(new BSTR(pointerResult[idx]).getValue(),equalTo(testString));
  assertThat((String)objectResult[idx],equalTo(testString));
  sa.unaccessData();
  sa.destroy();
}
