{
  final int MAGIC=0xABEDCF23;
  final boolean[] hasAnnotation={false,false};
  DefaultTypeMapper mapper=new DefaultTypeMapper();
  mapper.addTypeConverter(Boolean.class,new TypeConverter(){
    @Override public Object toNative(    Object value,    ToNativeContext ctx){
      MethodParameterContext mcontext=(MethodParameterContext)ctx;
      hasAnnotation[0]=mcontext.getMethod().getAnnotation(FooBoolean.class) != null;
      return Integer.valueOf(Boolean.TRUE.equals(value) ? MAGIC : 0);
    }
    @Override public Object fromNative(    Object value,    FromNativeContext context){
      MethodResultContext mcontext=(MethodResultContext)context;
      hasAnnotation[1]=mcontext.getMethod().getAnnotation(FooBoolean.class) != null;
      return Boolean.valueOf(((Integer)value).intValue() == MAGIC);
    }
    @Override public Class<?> nativeType(){
      return Integer.class;
    }
  }
);
  AnnotationTestLibrary lib=Native.loadLibrary("testlib",AnnotationTestLibrary.class,Collections.singletonMap(Library.OPTION_TYPE_MAPPER,mapper));
  assertEquals("Failed to convert integer return to boolean TRUE",true,lib.returnInt32Argument(true));
  assertTrue("Failed to get annotation from ParameterContext",hasAnnotation[0]);
  assertTrue("Failed to get annotation from ResultContext",hasAnnotation[1]);
}
