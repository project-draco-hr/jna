{
  super(index,typeLibUtil,funcDesc,typeInfoUtil);
  String[] names=typeInfoUtil.getNames(funcDesc.memid,paramCount + 1);
  for (int i=0; i < paramCount; i++) {
    ELEMDESC elemdesc=funcDesc.lprgelemdescParam.elemDescArg[i];
    String methodName=names[i + 1].toLowerCase();
    String type=this.getType(elemdesc.tdesc);
    String _methodName=this.replaceJavaKeyword(methodName);
    methodparams+=type + " " + _methodName;
    if (type.equals("VARIANT"))     methodvariables+=_methodName;
 else     methodvariables+="new VARIANT(" + _methodName + ")";
    if (i < (paramCount - 1)) {
      methodparams+=", ";
      methodvariables+=", ";
    }
  }
  String returnValue;
  if (this.returnType.equalsIgnoreCase("VARIANT"))   returnValue="pResult";
 else   returnValue="((" + returnType + ") pResult.getValue())";
  this.replaceVariable("helpstring",docStr);
  this.replaceVariable("returntype",returnType);
  this.replaceVariable("returnvalue",returnValue);
  this.replaceVariable("methodname",methodName);
  this.replaceVariable("methodparams",methodparams);
  this.replaceVariable("methodvariables",methodvariables);
  this.replaceVariable("vtableid",String.valueOf(vtableId));
  this.replaceVariable("memberid",String.valueOf(memberid));
  this.replaceVariable("functionCount",String.valueOf(count));
}
